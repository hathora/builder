import {
  UserId,
  {{#each types}}
  {{@key}},
  {{/each}}
  {{#each methods}}
  {{makeRequestName @key}},
  {{/each}}
} from "./types";
import io from "socket.io-client";

export type StateId = string;

export class LsotClient {
  private constructor(private socket: SocketIOClient.Socket) {}

  public static async registerUser(username: PlayerName): Promise<UserId> {
    const res = await fetch("/register", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({ playerName: username })
    });
    const { userId } = await res.json();
    return userId;
  }

  public static async createState(userId: UserId): Promise<StateId> {
    const res = await fetch("/new?userId=" + userId, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      }
    });
    const { stateId } = await res.json();
    return stateId;
  }

  public static async connect(
    userId: UserId,
    stateId: StateId,
    onStateChange: (state: {{userState}}) => void
  ): Promise<LsotClient> {
    const socket = io({ query: { stateId, userId } });
    socket.on("state", onStateChange);
    return new LsotClient(socket);
  }

  {{#each methods}}
  {{#if (ne @key ../initialize)}}
  public {{@key}}(request: {{makeRequestName @key}}): void {
    this.socket.emit("{{@key}}", request);
  }

  {{/if}}
  {{/each}}
  public disconnect(): void {
    this.socket.close();
  }
}
