import {
  UserId,
  PlayerName,
  {{userState}},
  {{#each methods}}
  {{#if (ne @key ../initialize)}}
  {{makeRequestName @key}},
  {{/if}}
  {{/each}}
} from "./types";

export type StateId = string;

export class LsotClient {
  private constructor(private socket: WebSocket) {}

  public static async registerUser(username: PlayerName): Promise<UserId> {
    const res = await fetch("/register", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ playerName: username }),
    });
    const { userId } = await res.json();
    return userId;
  }

  public static async createState(userId: UserId): Promise<StateId> {
    const res = await fetch("/new?userId=" + userId, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
    });
    const { stateId } = await res.json();
    return stateId;
  }

  public static async connect(
    userId: UserId,
    stateId: StateId,
    onStateChange: (state: {{userState}}) => void
  ): Promise<LsotClient> {
    const socket = new WebSocket(`ws://${location.host}/${stateId}`);
    socket.onopen = () => {
      socket.send(userId);
    };
    socket.onmessage = ({ data }) => onStateChange(JSON.parse(data));
    return new LsotClient(socket);
  }

  {{#each methods}}
  {{#if (ne @key ../initialize)}}
  public {{@key}}(request: {{makeRequestName @key}}): void {
    this.socket.send(JSON.stringify({ method: "{{@key}}", args: request }));
  }

  {{/if}}
  {{/each}}
  public disconnect(): void {
    this.socket.close();
  }
}
