import socketio from "socket.io";
import express from "express";
import Bundler from "parcel-bundler";
import { reload } from "import-reload";
import * as http from "http";
import * as path from "path";

const app = express();
const server = http.createServer(app);
const io = socketio(server);
const bundler = new Bundler(path.join(__dirname, "index.html"), {
  cache: false
});

const users: Map<string, any> = new Map();
const states: Map<string, any> = new Map();
const connections: Map<string, Set<SocketIO.Socket>> = new Map();

async function main() {
  const impl = await reload(
    () => import("../impl"),
    Impl => new Impl.Impl()
  );

  function addConnection(stateId: string, socket: socketio.Socket) {
    if (!connections.has(stateId)) {
      connections.set(stateId, new Set([socket]));
    } else {
      connections.get(stateId)!.add(socket);
    }
  }

  function deleteConnection(stateId: string, socket: SocketIO.Socket) {
    connections.get(stateId)!.delete(socket);
    if (connections.get(stateId)!.size === 0) {
      connections.delete(stateId);
    }
  }

  function broadcastUpdates(stateId: string, state: any) {
    connections.get(stateId)!.forEach(socket => {
      const userId = socket.handshake.query.userId;
      const userData = users.get(userId)!;
      const userState = impl.getUserState(state, userData);
      socket.emit("state", userState);
    });
  }

  app.use(express.json());
  app.post("/register", (req, res) => {
    const userData = req.body;
    const userId = Math.random()
      .toString(36)
      .substring(2);
    users.set(userId, userData);
    res.json({ userId });
  });
  app.post("/new", (req, res) => {
    const userId = req.query.userId;
    const userData = users.get(userId)!;
    const state = impl.createGame(userData);
    const stateId = Math.random()
      .toString(36)
      .substring(2);
    states.set(stateId, state);
    res.json({ stateId });
  });
  app.use(bundler.middleware());

  io.use((socket, next) => {
    const stateId = socket.handshake.query.stateId;
    const userId = socket.handshake.query.userId;
    if (!states.has(stateId) || !users.has(userId)) {
      next(new Error("Invalid connection parameters"));
    } else {
      next();
    }
  }).on("connection", socket => {
    const stateId = socket.handshake.query.stateId;
    const userId = socket.handshake.query.userId;
    const state = states.get(stateId)!;
    const userData = users.get(userId)!;
    addConnection(stateId, socket);
    socket.emit("state", impl.getUserState(state, userData));
    socket.on("disconnect", () => {
      deleteConnection(stateId, socket);
    });

    {{#each methods}}
    {{#if (ne @key ../initialize)}}
    socket.on("{{@key}}", request => {
      impl.{{@key}}(state, userData, request);
      broadcastUpdates(stateId, state);
    });
    {{/if}}
    {{/each}}
  });

  server.listen(3000, () => {
    console.log("listening on *:3000");
  });
}
main();
