import {
  PlayerName,
  {{userState}},
  {{#each methods}}
  {{#if (ne @key ../initialize)}}
  {{makeRequestName @key}},
  {{/if}}
  {{/each}}
} from "./types";

export type StateId = string;

export class LsotClient {
  private constructor(private socket: WebSocket) {}

  public static async registerUser(username: PlayerName): Promise<string> {
    const res = await fetch("/register", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ playerName: username }),
    });
    const { token } = await res.json();
    return token;
  }

  public static async createState(token: string): Promise<StateId> {
    const res = await fetch("/new", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": "Bearer " + token,
      },
    });
    const { stateId } = await res.json();
    return stateId;
  }

  public static async connect(
    token: string,
    stateId: StateId,
    onStateChange: (state: {{userState}}) => void
  ): Promise<LsotClient> {
    const socket = new WebSocket(`ws://${location.host}/${stateId}`);
    socket.onopen = () => socket.send(token);
    socket.onmessage = ({ data }) => {
      const message = JSON.parse(data);
      if (message.type === "response") {
        console.log("Receieved response for " + message.method + " error: " + message.error);
      } else if (message.type === "state") {
        onStateChange(message.state);
      } else {
        console.log("Unknown message type: " + message.type);
      }
    };
    return new LsotClient(socket);
  }

  {{#each methods}}
  {{#if (ne @key ../initialize)}}
  public {{@key}}(request: {{makeRequestName @key}}): void {
    this.socket.send(JSON.stringify({ method: "{{@key}}", args: request }));
  }

  {{/if}}
  {{/each}}
  public disconnect(): void {
    this.socket.close();
  }
}
