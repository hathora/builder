import WebSocket from "isomorphic-ws";
import axios from "axios";
import {
  PlayerName,
  {{userState}},
  {{#each methods}}
  {{#if (ne @key ../initialize)}}
  {{makeRequestName @key}},
  {{/if}}
  {{/each}}
} from "./types";

export type StateId = string;

export class RtagClient {
  private callbacks: Record<string, (error?: string) => void> = {};

  private constructor(private socket: WebSocket) {}

  public static async registerUser(username: PlayerName): Promise<string> {
    const res = await axios.post("/register", { playerName: username });
    return res.data.token;
  }

  public static async createState(token: string): Promise<StateId> {
    const res = await axios.post("/new", {}, { headers: { Authorization: "Bearer " + token } });
    return res.data.stateId;
  }

  public static async connect(
    host: string,
    token: string,
    stateId: StateId,
    onStateChange: (state: {{userState}}) => void
  ): Promise<RtagClient> {
    const socket = new WebSocket(`ws://${host}/${stateId}`);
    const client = new RtagClient(socket);
    socket.onopen = () => socket.send(token);
    socket.onmessage = ({ data }) => {
      const message = JSON.parse(data);
      if (message.type === "response") {
        client.callbacks[message.msgId](message.error);
        delete client.callbacks[message.msgId];
      } else if (message.type === "state") {
        onStateChange(message.state);
      } else {
        console.error("Unknown message type: " + message.type);
      }
    };
    return client;
  }

  {{#each methods}}
  {{#if (ne @key ../initialize)}}
  public {{@key}}(request: {{makeRequestName @key}}, cb: (error?: string) => void): void {
    const msgId = Math.random().toString(36).substring(2);
    this.callbacks[msgId] = cb;
    this.socket.send(JSON.stringify({ method: "{{@key}}", msgId, args: request }));
  }

  {{/if}}
  {{/each}}
  public disconnect(): void {
    this.socket.close();
  }
}
