import { LsotClient } from "./client";
import Vue from "vue";

let client: LsotClient;

Vue.component("method-form", {
  props: { method: String },
  data: () => ({ value: {} }),
  template: `<div class="form" :id="method">
      <h1 class="heading">\{{method}}</h1>
      <slot :arg="method" :value="value"></slot>
      <button type="button" class="submit-button" @click="submit">
        <span class="button-text">Submit</span>
      </button>
    </div>`,
  created: function () {
    this.$on("update", (arg: string, value: any) => {
      this.$set(this.value, arg, value);
    });
  },
  methods: {
    submit: function () {
      client[this.method as keyof LsotClient](this.value as any, (error) => {
        if (error) {
          console.error(error);
        } else {
          this.value = {};
        }
      });
    },
  },
});

Vue.component("object-input", {
  props: { arg: String, value: { type: Object, default: () => ({}) } },
  template: `<div><slot :value="value"></slot></div>`,
  created: function () {
    this.$on("update", (arg: number, value: any) => {
      this.$parent.$emit("update", arg, value);
    });
  },
});

Vue.component("array-input", {
  props: { arg: String, value: { type: Array, default: () => [] } },
  template: `<div>
      <div v-for="(v, i) in value">
        <slot :arg="i.toString()" :value="v"></slot>
        <button type="button" @click="$parent.$emit('update', arg, value.slice(0, i).concat(value.slice(i+1, value.length)))">x</button>
        <button type="button" @click="$parent.$emit('update', arg, i === 0 ? value : [...value.slice(0, i-1), value[i], value[i-1], ...value.slice(i+1, value.length)])">up</button>
        <button type="button" @click="$parent.$emit('update', arg, i === (value.length-1) ? value : [...value.slice(0, i), value[i+1], value[i], ...value.slice(i+2, value.length)])">dn</button>
      </div>
      <button type="button" @click="$parent.$emit('update', arg, value.concat(null))">Add</button>
    </div>`,
  created: function () {
    this.$on("update", (arg: string, value: any) => {
      this.$parent.$emit("update", this.arg, Object.assign([], this.value, { [Number(arg)]: value }));
    });
  },
});

Vue.component("enum-input", {
  props: { arg: String, value: { type: Number, default: null }, options: Array },
  template: `<div>
      <select @change="$parent.$emit('update', arg, Number($event.target.value))">
        <option disabled :selected="value === null">Select a value...</option>
        <option v-for="option in options" :value="option.value" :selected="option.value === value">
          \{{option.label}}
        </option>
      </select>
    </div>`,
});

Vue.component("string-input", {
  props: { arg: String, value: { type: String, default: "" } },
  template: `<div>
      <input type="text" :value="value" @input="$parent.$emit('update', arg, $event.target.value)" />
    </div>`,
});

Vue.component("number-input", {
  props: { arg: String, value: { type: Number, default: null } },
  template: `<div>
      <input type="number" :value="value" @input="$parent.$emit('update', arg, Number($event.target.value))" />
    </div>`,
});

Vue.component("object-display", {
  props: { value: Object },
  template: `<div><slot :value="value"></slot></div>`,
});

Vue.component("array-display", {
  props: { value: Array },
  template: `<div>
    <div v-for="v in value">
      <slot :value="v"></slot>
    </div>
    <div v-if="value && value.length == 0">[]</div>
  </div>`,
});

Vue.component("enum-display", {
  props: { value: Number, options: Array },
  template: `<span v-if="value != undefined">\{{options[value].label}}</span>`,
});

Vue.component("string-display", {
  props: { value: String },
  template: `<span>\{{value}}</span>`,
});

Vue.component("number-display", {
  props: { value: Number },
  template: `<span>\{{value}}</span>`,
});

Vue.component("boolean-display", {
  props: { value: Boolean },
  template: `<span>\{{value}}</span>`,
});

Vue.component("debug-app", {
  data: () => ({ currentRoute: window.location.pathname }),
  computed: {
    templateName() {
      if (this.currentRoute == "/") {
        return "home";
      } else if (this.currentRoute == "/login") {
        return "login";
      }
      return "state";
    },
  },
  template: `<div><slot :name="this.templateName"></slot></div>`,
});

new Vue({
  el: "#app",
});
