// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import getRandomValues from "get-random-values";
import { Reader, Writer } from "bin-serde";
import { HathoraClient as _HathoraClient } from "@hathora/client-sdk";
import { HathoraTransport, TransportType } from "@hathora/client-sdk/lib/transport";

import {
  decodeStateSnapshot,
  decodeStateUpdate,
  {{userState}} as UserState,
  IInitializeRequest,
  {{#each methods}}
  {{makeRequestName @key}},
  {{/each}}
} from "../../api/types";
import { UserData, Response, Method, COORDINATOR_HOST, MATCHMAKER_HOST } from "../../api/base";

import { computePatch } from "./patch";
import { ConnectionFailure, transformCoordinatorFailure } from "./failures";

export type StateId = string;
export type UpdateArgs = { stateId: StateId; state: UserState; updatedAt: number; events: string[] };
export type UpdateCallback = (updateArgs: UpdateArgs) => void;
export type ErrorCallback = (error: ConnectionFailure) => void;

export class HathoraClient {
  public appId = "{{appId}}";
  private _client = new _HathoraClient(this.appId, COORDINATOR_HOST);

  public static getUserFromToken(token: string): UserData {
    return _HathoraClient.getUserFromToken(token) as UserData;
  }

{{#each auth}}
{{#if (eq @key "anonymous")}}
  public async loginAnonymous(): Promise<string> {
    return this._client.loginAnonymous();
  }

{{else if (eq @key "nickname")}}
  public async loginNickname(nickname: string): Promise<string> {
    return this._client.loginNickname(nickname);
  }

{{else if (eq @key "google")}}
  public async loginGoogle(idToken: string): Promise<string> {
    return this._client.loginGoogle(idToken);
  }

{{/if}}
{{/each}}
  public async create(token: string, request: IInitializeRequest): Promise<string> {
    return this._client.create(token, IInitializeRequest.encode(request).toBuffer());
  }

  public async connect(
    token: string,
    stateId: StateId,
    onUpdate?: UpdateCallback,
    onError?: ErrorCallback,
    transportType: TransportType = TransportType.WebSocket
  ): Promise<HathoraConnection> {
    const connection = new HathoraConnection(this._client, stateId, token, transportType, onUpdate, onError);
    await connection.connect();
    return connection;
  }

  public async findMatch(
    token: string,
    request: IInitializeRequest,
    numPlayers: number,
    onUpdate: (playersFound: number) => void
  ): Promise<string> {
    return new Promise<string>((resolve, reject) => {
      const socket = new WebSocket(`wss://${MATCHMAKER_HOST}/${this.appId}`);
      socket.binaryType = "arraybuffer";
      socket.onclose = reject;
      socket.onopen = () =>
        socket.send(
          new Writer()
            .writeString(token)
            .writeUVarint(numPlayers)
            .writeBuffer(IInitializeRequest.encode(request).toBuffer())
            .toBuffer()
        );
      socket.onmessage = ({ data }) => {
        const reader = new Reader(new Uint8Array(data as ArrayBuffer));
        const type = reader.readUInt8();
        if (type === 0) {
          onUpdate(reader.readUVarint());
        } else if (type === 1) {
          resolve(reader.readString());
        } else {
          console.error("Unknown message type", type);
        }
      };
    });
  }
}

export class HathoraConnection {
  private callbacks: Record<string, (response: Response) => void> = {};
  private changedAt = 0;
  private updateListeners: UpdateCallback[] = [];
  private errorListeners: ErrorCallback[] = [];
  private transport!: HathoraTransport;
  private internalState!: UserState;

  constructor(
    private _client: _HathoraClient,
    private stateId: StateId,
    private token: string,
    private transportType: TransportType,
    onUpdate?: UpdateCallback,
    onError?: ErrorCallback
  ) {
    this.stateId = stateId;
    this.token = token;

    if (onUpdate !== undefined) {
      this.onUpdate(onUpdate);
    }
    if (onError !== undefined) {
      this.onError(onError);
    }
  }

  public async connect(): Promise<void> {
    return new Promise(async (resolve, reject) => {
      this.transport = await this._client.connect(
        this.token,
        this.stateId,
        (data) => {
          resolve();
          this.handleData(data);
        },
        (e) => {
          reject(e.reason);
          this.handleClose(e);
        },
        this.transportType
      );
    });
  }

  public get state(): UserState {
    return this.internalState;
  }

  public onUpdate(listener: UpdateCallback) {
    this.updateListeners.push(listener);
  }

  public onError(listener: ErrorCallback) {
    this.errorListeners.push(listener);
  }

  public removeAllListeners() {
    this.updateListeners = [];
    this.errorListeners = [];
  }

  {{#each methods}}
  public {{@key}}(request: {{makeRequestName @key}}): Promise<Response> {
    return this.callMethod(Method.{{uppercase @key}}, {{makeRequestName @key}}.encode(request).toBuffer());
  }

  {{/each}}
  public disconnect(code?: number): void {
    this.transport.disconnect(code);
  }

  private callMethod(method: Method, request: Uint8Array): Promise<Response> {
    return new Promise((resolve, reject) => {
      if (!this.transport.isReady()) {
        reject("Connection not open");
      } else {
        const msgId: Uint8Array = getRandomValues(new Uint8Array(4));
        this.transport.write(new Uint8Array([...new Uint8Array([method]), ...msgId, ...request]));
        this.callbacks[new DataView(msgId.buffer).getUint32(0)] = resolve;
      }
    });
  }

  private handleData = (data: ArrayBuffer) => {
    const reader = new Reader(new Uint8Array(data));
    const type = reader.readUInt8();
    if (type === 0) {
      this.internalState = decodeStateSnapshot(reader);
      this.changedAt = 0;
      this.updateListeners.forEach((listener) =>
        listener({
          stateId: this.stateId,
          state: JSON.parse(JSON.stringify(this.internalState)),
          updatedAt: 0,
          events: [],
        })
      );
    } else if (type === 1) {
      const { stateDiff, changedAtDiff, responses, events } = decodeStateUpdate(reader);
      if (stateDiff !== undefined) {
        this.internalState = computePatch(this.internalState!, stateDiff);
      }
      this.changedAt += changedAtDiff;
      this.updateListeners.forEach((listener) =>
        listener({
          stateId: this.stateId,
          state: JSON.parse(JSON.stringify(this.internalState)),
          updatedAt: this.changedAt,
          events: events.map((e) => e.event),
        })
      );
      responses.forEach(({ msgId, response }) => {
        if (msgId in this.callbacks) {
          this.callbacks[msgId](response);
          delete this.callbacks[msgId];
        }
      });
    } else if (type === 2) {
      this.transport.disconnect(4004);
    } else if (type === 3) {
      this.transport.pong();
    } else {
      console.error("Unknown message type", type);
    }
  };

  private handleClose = (e: { code: number; reason: string }) => {
    console.error("Connection closed", e);
    this.errorListeners.forEach((listener) => listener(transformCoordinatorFailure(e)));
  };
}
