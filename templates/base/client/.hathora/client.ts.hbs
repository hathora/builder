import WebSocket from "isomorphic-ws";
// @ts-ignore
import getRandomValues from "get-random-values";
import axios from "axios";
import jwtDecode from "jwt-decode";
import { Reader, Writer } from "bin-serde";
import { UserData, Response, Method } from "../../api/base";
import {
  decodeStateSnapshot,
  decodeStateUpdate,
  UserId,
  {{userState}} as UserState,
  IInitializeRequest,
  {{#each methods}}
  {{makeRequestName @key}},
  {{/each}}
} from "../../api/types";
import { ConnectionFailure, transformCoordinatorFailure } from "./failures";
import { computePatch } from "./patch";

const COORDINATOR_HOST = process.env.COORDINATOR_HOST;
const MATCHMAKER_HOST = process.env.MATCHMAKER_HOST;

export type StateId = string;
export type UpdateArgs = { stateId: StateId; state: UserState; updatedAt: number; events: string[] };
export type UpdateCallback = (updateArgs: UpdateArgs) => void;
export type ErrorCallback = (error: ConnectionFailure) => void;

export class HathoraClient {
  public appId = "{{appId}}";

  public static getUserFromToken(token: string): UserData {
    return jwtDecode(token);
  }

  public static lookupUser(userId: UserId): Promise<UserData> {
    return axios.get<UserData>(`https://${COORDINATOR_HOST}/users/${userId}`).then((res) => res.data);
  }

{{#each auth}}
{{#if (eq @key "anonymous")}}
  public async loginAnonymous(): Promise<string> {
    const res = await axios.post(`https://${COORDINATOR_HOST}/${this.appId}/login/anonymous`);
    return res.data.token;
  }

{{else if (eq @key "google")}}
  public async loginGoogle(idToken: string): Promise<string> {
    const res = await axios.post(`https://${COORDINATOR_HOST}/${this.appId}/login/google`, { idToken });
    return res.data.token;
  }

{{/if}}
{{/each}}
  public async create(token: string, request: IInitializeRequest): Promise<string> {
    const res = await axios.post(
      `https://${COORDINATOR_HOST}/${this.appId}/create`,
      IInitializeRequest.encode(request).toBuffer(),
      { headers: { Authorization: token, "Content-Type": "application/octet-stream" } }
    );
    return res.data.stateId;
  }

  public async connect(token: string, stateId: StateId): Promise<HathoraConnection> {
    return new Promise((resolve, reject) => {
      const socket = new WebSocket(`wss://${COORDINATOR_HOST}/${this.appId}`);
      socket.binaryType = "arraybuffer";
      socket.onclose = (e) => reject(transformCoordinatorFailure(e));
      socket.onopen = () =>
        socket.send(
          new Writer()
            .writeUInt8(0)
            .writeString(token)
            .writeUInt64([...stateId].reduce((r, v) => r * 36n + BigInt(parseInt(v, 36)), 0n))
            .toBuffer()
        );
      socket.onmessage = ({ data }) => {
        const reader = new Reader(new Uint8Array(data as ArrayBuffer));
        const type = reader.readUInt8();
        if (type === 0) {
          resolve(new HathoraConnection(stateId, decodeStateSnapshot(reader), socket));
        } else {
          reject("Unknown message type: " + type);
        }
      };
    });
  }

  public async findMatch(
    token: string,
    request: IInitializeRequest,
    numPlayers: number,
    onUpdate: (playersFound: number) => void
  ): Promise<string> {
    return new Promise<string>((resolve, reject) => {
      const socket = new WebSocket(`wss://${MATCHMAKER_HOST}/${this.appId}`);
      socket.binaryType = "arraybuffer";
      socket.onclose = reject;
      socket.onopen = () =>
        socket.send(
          new Writer()
            .writeString(token)
            .writeUVarint(numPlayers)
            .writeBuffer(IInitializeRequest.encode(request).toBuffer())
            .toBuffer()
        );
      socket.onmessage = ({ data }) => {
        const reader = new Reader(new Uint8Array(data as ArrayBuffer));
        const type = reader.readUInt8();
        if (type === 0) {
          onUpdate(reader.readUVarint());
        } else if (type === 1) {
          resolve(reader.readString());
        } else {
          console.error("Unknown message type", type);
        }
      };
    });
  }
}

export class HathoraConnection {
  private callbacks: Record<string, (response: Response) => void> = {};
  private changedAt = 0;
  private updateListeners: UpdateCallback[] = [];
  private errorListeners: ErrorCallback[] = [];

  constructor(public stateId: StateId, public state: UserState, private socket: WebSocket) {
    socket.onmessage = ({ data }) => {
      const reader = new Reader(new Uint8Array(data as ArrayBuffer));
      const type = reader.readUInt8();
      if (type === 0) {
        this.state = decodeStateSnapshot(reader);
        this.changedAt = 0;
        this.updateListeners.forEach((listener) =>
          listener({ stateId, state: JSON.parse(JSON.stringify(this.state)), updatedAt: 0, events: [] })
        );
      } else if (type === 1) {
        const { stateDiff, changedAtDiff, responses, events } = decodeStateUpdate(reader);
        if (stateDiff !== undefined) {
          this.state = computePatch(this.state!, stateDiff);
        }
        this.changedAt += changedAtDiff;
        this.updateListeners.forEach((listener) =>
          listener({
            stateId,
            state: JSON.parse(JSON.stringify(this.state)),
            updatedAt: this.changedAt,
            events: events.map((e) => e.event),
          })
        );
        responses.forEach(({ msgId, response }) => {
          if (msgId in this.callbacks) {
            this.callbacks[msgId](response);
            delete this.callbacks[msgId];
          }
        });
      } else if (type === 2) {
        this.disconnect(4004);
      } else {
        console.error("Unknown message type", type);
      }
    };
    socket.onclose = (e) => {
      console.error("Connection closed", e);
      this.errorListeners.forEach((listener) => listener(transformCoordinatorFailure(e)));
    };
  }

  public onUpdate(listener: UpdateCallback) {
    this.updateListeners.push(listener);
  }

  public onError(listener: ErrorCallback) {
    this.errorListeners.push(listener);
  }

  public removeAllListeners() {
    this.updateListeners = [];
    this.errorListeners = [];
  }

  {{#each methods}}
  public {{@key}}(request: {{makeRequestName @key}}): Promise<Response> {
    return this.callMethod(Method.{{uppercase @key}}, {{makeRequestName @key}}.encode(request).toBuffer());
  }

  {{/each}}
  public disconnect(code?: number): void {
    if (code === undefined) {
      this.socket.onclose = () => {};
    }
    this.socket.close(code);
  }

  private callMethod(method: Method, request: Uint8Array): Promise<Response> {
    return new Promise((resolve, reject) => {
      if (this.socket.readyState !== this.socket.OPEN) {
        reject("Connection not open");
      } else {
        const msgId: Uint8Array = getRandomValues(new Uint8Array(4));
        this.socket.send(new Uint8Array([...new Uint8Array([method]), ...msgId, ...request]));
        this.callbacks[new DataView(msgId.buffer).getUint32(0)] = resolve;
      }
    });
  }
}
