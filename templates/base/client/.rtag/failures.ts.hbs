enum ConnectionFailureType {
  STATE_NOT_FOUND = "STATE_NOT_FOUND",
  NO_AVAILABLE_STORES = "NO_AVAILABLE_STORES",
  INVALID_USER_DATA = "INVALID_USER_DATA",
  INVALID_STATE_ID = "INVALID_STATE_ID",
  GENERIC_FAILURE = "GENERIC_FAILURE",
}

export interface ConnectionFailure {
  type: ConnectionFailureType,
  message: string;
}

export const transformCoordinatorFailure = (e: {code: number, reason: string}): ConnectionFailure  => {
  switch (e.code) {
    case 4000:
      return({
        type: ConnectionFailureType.STATE_NOT_FOUND,
        message: e.reason
      });
    case 4001:
      return({
        type: ConnectionFailureType.NO_AVAILABLE_STORES,
        message: e.reason
      });
    case 4002:
      return({
        type: ConnectionFailureType.INVALID_USER_DATA,
        message: e.reason
      });
    case 4003:
      return({
        type: ConnectionFailureType.INVALID_STATE_ID,
        message: e.reason
      });
    default:
      return({
        type: ConnectionFailureType.GENERIC_FAILURE,
        message: e.reason
      });
  }
}

export const isStateNotFoundFailure = (failure: ConnectionFailure) => {
  return failure.type === ConnectionFailureType.STATE_NOT_FOUND;
}

export const isNoAvailableStores = (failure: ConnectionFailure) => {
  return failure.type === ConnectionFailureType.NO_AVAILABLE_STORES;
}

export const isInvalidUserData = (failure: ConnectionFailure) => {
  return failure.type === ConnectionFailureType.INVALID_USER_DATA;
}

export const isInvalidStateId = (failure: ConnectionFailure) => {
  return failure.type === ConnectionFailureType.INVALID_STATE_ID;
}

export const isGenericFailure = (failure: ConnectionFailure) => {
  return failure.type === ConnectionFailureType.GENERIC_FAILURE;
}
