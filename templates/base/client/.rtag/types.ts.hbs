import { Response } from "./base";
import { Writer, Reader, BitString } from "./serde";

type DeepPartial<T> = T extends string | number | boolean | undefined
  ? T | undefined
  : T extends Array<infer ArrayType>
  ? Array<ArrayType>
  : { [K in keyof T]?: DeepPartial<T[K]> };

{{#each types}}
{{#if alias}}
export type {{@key}} = {{> renderTypeArg}};
{{else if (eq type "enum")}}
export enum {{@key}} {
  {{#each options}}
  {{label}},
  {{/each}}
}
{{else if (eq type "union")}}
export type {{@key}} = {{#each options}}{{#unless @first}} | {{/unless}}{ type: "{{> renderTypeArg}}"; val: {{> renderTypeArg}} }{{/each}};
type {{@key}}Partial = {{#each options}}{{#unless @first}} | {{/unless}}{ type: "{{> renderTypeArg}}"; val: DeepPartial<{{> renderTypeArg}}> }{{/each}};
{{else if (eq type "object")}}
export type {{@key}} = {
  {{#each properties}}
  {{@key}}{{#if (eq type "optional")}}?{{/if}}: {{> renderTypeArg}};
  {{/each}}
};
{{else}}
export type {{@key}} = {{> renderTypeArg}};
{{/if}}
{{/each}}
{{#each methods}}
export type {{makeRequestName @key}} = {
  {{#each properties}}
  {{@key}}{{#if (eq type "optional")}}?{{/if}}: {{> renderTypeArg}};
  {{/each}}
};
{{/each}}

{{#each types}}
{{#if (eq type "object")}}
export const {{@key}} = {
  default(): {{@key}} {
    return {
      {{#each properties}}
      {{@key}}: {{> renderDefault}},
      {{/each}}
    };
  },
  encode(obj: {{@key}}, buf?: Writer) {
    buf ??= new Writer();
    {{#each properties}}
    {{> renderEncodeArg arg=@key}};
    {{/each}}
    return buf.toBuffer();
  },
  encodeDiff(obj: DeepPartial<{{@key}}>, tracker: BitString, buf?: Writer) {
    buf ??= new Writer();
    {{#each properties}}
    tracker.push(obj.hasOwnProperty("{{@key}}") ? 1 : 0);
    {{#if (eq type "optional")}}
    if (obj.hasOwnProperty("{{@key}}")) {
    {{else}}
    if (obj.{{@key}} !== undefined) {
    {{/if}}
      {{> renderEncodeDiffArg arg=@key}};
    }
    {{/each}}
    return buf.toBuffer();
  },
  decode(buf: ArrayBufferView | Reader): {{@key}} {
    const sb = ArrayBuffer.isView(buf) ? new Reader(buf) : buf;
    return {
      {{#each properties}}
      {{@key}}: {{> renderDecodeArg}},
      {{/each}}
    };
  },
  decodeDiff(buf: ArrayBufferView | Reader, tracker: BitString): DeepPartial<{{@key}}> {
    const sb = ArrayBuffer.isView(buf) ? new Reader(buf) : buf;
    const obj: DeepPartial<{{@key}}> = {};
    {{#each properties}}
    if (tracker.pop() === 1) {
      obj.{{@key}} = {{> renderDecodeDiffArg}};
    }
    {{/each}}
    return obj;
  },
};
{{else if (eq type "union")}}
export const {{@key}} = {
  values() {
    return [{{#each options}}"{{@key}}"{{#unless @last}}, {{/unless}}{{/each}}];
  },
  encode(obj: {{@key}}, buf?: Writer) {
    buf ??= new Writer();
    writeUInt8(buf, this.values().indexOf(obj.type));
    {{#each options}}
    {{#unless @first}}else {{/unless}}if (obj.type === "{{@key}}") {
      const x = obj.val;
      {{> renderEncodeArg}};
    }
    {{/each}}
    return buf.toBuffer();
  },
  encodeDiff(obj: {{@key}}Partial, tracker: BitString, buf?: Writer) {
    buf ??= new Writer();
    writeUInt8(buf, this.values().indexOf(obj.type));
    {{#each options}}
    {{#unless @first}}else {{/unless}}if (obj.type === "{{@key}}") {
      const x = obj.val;
      {{> renderEncodeDiffArg}};
    }
    {{/each}}
    return buf.toBuffer();
  },
  decode(buf: ArrayBufferView | Reader): {{@key}} {
    const sb = ArrayBuffer.isView(buf) ? new Reader(buf) : buf;
    const type = parseUInt8(sb);
    {{#each options}}
    {{#unless @first}}else {{/unless}}if (type === {{@index}}) {
      return { type: "{{@key}}", val: {{> renderDecodeArg}} };
    }
    {{/each}}
    throw new Error("Invalid union");
  },
  decodeDiff(buf: ArrayBufferView | Reader, tracker: BitString): {{@key}}Partial {
    const sb = ArrayBuffer.isView(buf) ? new Reader(buf) : buf;
    const type = parseUInt8(sb);
    {{#each options}}
    {{#unless @first}}else {{/unless}}if (type === {{@index}}) {
      return { type: "{{@key}}", val: {{> renderDecodeDiffArg}} };
    }
    {{/each}}
    throw new Error("Invalid union");
  },
}
{{/if}}
{{/each}}
{{#each methods}}
export const {{makeRequestName @key}} = {
  default(): {{makeRequestName @key}} {
    return {
      {{#each properties}}
      {{@key}}: {{> renderDefault}},
      {{/each}}
    };
  },
  encode(obj: {{makeRequestName @key}}, buf?: Writer) {
    buf ??= new Writer();
    {{#each properties}}
    {{> renderEncodeArg arg=@key}};
    {{/each}}
    return buf.toBuffer();
  },
  decode(buf: ArrayBufferView | Reader): {{makeRequestName @key}} {
    const sb = ArrayBuffer.isView(buf) ? new Reader(buf) : buf;
    return {
      {{#each properties}}
      {{@key}}: {{> renderDecodeArg}},
      {{/each}}
    };
  }
}
{{/each}}
{{#*inline "renderTypeArg"}}
{{#if alias}}
{{typeString}}
{{~else if (eq type "optional")}}
{{> renderTypeArg item}}
{{~else if (eq type "array")}}
{{> renderTypeArg items}}[]
{{~else if (eq type "int")}}
number
{{~else if (eq type "float")}}
number
{{~else if (eq type "string")}}
string
{{~else if (eq type "boolean")}}
boolean
{{~else if (eq type "plugin")}}
{{> renderTypeArg item}}
{{~/if}}
{{~/inline}}
{{#*inline "renderDefault"}}
{{#if (eq type "array")}}
[]
{{~else if (eq type "int")}}
0
{{~else if (eq type "float")}}
0.0
{{~else if (eq type "string")}}
""
{{~else if (eq type "enum")}}
0
{{~else if (eq type "boolean")}}
false
{{~else if (eq type "optional")}}
undefined
{{~else if (eq type "object")}}
{{typeString}}.default()
{{~else if (eq type "union")}}
{{#each options}}
{{#if @first}}
{ type: "{{@key}}", val: {{> renderDefault}} }
{{~/if}}
{{/each}}
{{~else if (eq type "plugin")}}
{{> renderDefault item}}
{{/if}}
{{/inline}}
{{#*inline "renderEncodeArg"}}
{{#if (eq type "optional")}}
writeOptional(buf, obj.{{arg}}, (buf, x) => {{> renderEncodeArg item}})
{{~else if (eq type "array")}}
writeArray(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}}, (buf, x) => {{> renderEncodeArg items}})
{{~else if (eq type "enum")}}
writeUInt8(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "int")}}
writeInt(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "float")}}
writeFloat(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "string")}}
writeString(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "boolean")}}
writeBoolean(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "plugin")}}
{{> renderEncodeArg item arg=arg}}
{{~else}}
{{typeString}}.encode({{#if arg}}obj.{{arg}}{{else}}x{{/if}}, buf)
{{~/if}}
{{/inline}}
{{#*inline "renderEncodeDiffArg"}}
{{#if (eq type "optional")}}
writeOptional(buf, obj.{{arg}}, (buf, x) => {{> renderEncodeDiffArg item}})
{{~else if (eq type "array")}}
writeArray(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}}, (buf, x) => {{> renderEncodeArg items}})
{{~else if (eq type "enum")}}
writeUInt8(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "int")}}
writeInt(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "float")}}
writeFloat(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "string")}}
writeString(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "boolean")}}
writeBoolean(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "plugin")}}
{{> renderEncodeDiffArg item arg=arg}}
{{~else}}
{{typeString}}.encodeDiff({{#if arg}}obj.{{arg}}{{else}}x{{/if}}, tracker, buf)
{{~/if}}
{{/inline}}
{{#*inline "renderDecodeArg"}}
{{#if (eq type "optional")}}
parseOptional(sb, () => {{> renderDecodeArg item}})
{{~else if (eq type "array")}}
parseArray(sb, () => {{> renderDecodeArg items}})
{{~else if (eq type "enum")}}
parseUInt8(sb)
{{~else if (eq type "int")}}
parseInt(sb)
{{~else if (eq type "float")}}
parseFloat(sb)
{{~else if (eq type "string")}}
parseString(sb)
{{~else if (eq type "boolean")}}
parseBoolean(sb)
{{~else if (eq type "plugin")}}
{{> renderDecodeArg item}}
{{~else}}
{{typeString}}.decode(sb)
{{~/if}}
{{/inline}}
{{#*inline "renderDecodeDiffArg"}}
{{#if (eq type "optional")}}
parseOptional(sb, () => {{> renderDecodeDiffArg item}})
{{~else if (eq type "array")}}
parseArray(sb, () => {{> renderDecodeArg items}})
{{~else if (eq type "enum")}}
parseUInt8(sb)
{{~else if (eq type "int")}}
parseInt(sb)
{{~else if (eq type "float")}}
parseFloat(sb)
{{~else if (eq type "string")}}
parseString(sb)
{{~else if (eq type "boolean")}}
parseBoolean(sb)
{{~else if (eq type "plugin")}}
{{> renderDecodeDiffArg item}}
{{~else}}
{{typeString}}.decodeDiff(sb, tracker)
{{~/if}}
{{/inline}}

export function encodeState(state: {{userState}} | undefined, responses: Record<number, Response>) {
  const buf = new Writer();
  writeOptional(buf, state, (buf, x) => {{userState}}.encode(x, buf));
  Object.entries(responses).forEach(([msgId, response]) => {
    buf.writeUInt32(Number(msgId));
    const maybeError = response.type === "error" ? response.error : undefined;
    writeOptional(buf, maybeError, writeString);
  });
  return buf.toBuffer();
}
export function decodeState(buf: ArrayBufferView | Reader): { state?: {{userState}}; responses: Record<number, Response> } {
  const sb = ArrayBuffer.isView(buf) ? new Reader(buf) : buf;
  const state = parseOptional(sb, () => {{userState}}.decode(sb));
  const responses: Record<number, Response> = {};
  while (sb.remaining() > 0) {
    const msgId = sb.readUInt32();
    const maybeError = parseOptional(sb, () => parseString(sb));
    responses[msgId] = maybeError === undefined ? Response.ok() : Response.error(maybeError);
  }
  return { state, responses };
}

function writeUInt8(buf: Writer, x: number) {
  buf.writeUInt8(x);
}
function writeBoolean(buf: Writer, x: boolean) {
  buf.writeUInt8(x ? 1 : 0);
}
function writeInt(buf: Writer, x: number) {
  buf.writeVarint(x);
}
function writeFloat(buf: Writer, x: number) {
  buf.writeDouble(x);
}
function writeString(buf: Writer, x: string) {
  buf.writeString(x);
}
function writeOptional<T>(buf: Writer, x: T | undefined, innerWrite: (buf: Writer, x: T) => void) {
  writeBoolean(buf, x !== undefined);
  if (x !== undefined) {
    innerWrite(buf, x);
  }
}
function writeArray<T>(buf: Writer, x: T[], innerWrite: (buf: Writer, x: T) => void) {
  buf.writeUVarint(x.length);
  for (let i = 0; i < x.length; i++) {
    innerWrite(buf, x[i]);
  }
}

function parseUInt8(buf: Reader): number {
  return buf.readUInt8();
}
function parseBoolean(buf: Reader): boolean {
  return buf.readUInt8() > 0;
}
function parseInt(buf: Reader): number {
  return buf.readVarint();
}
function parseFloat(buf: Reader): number {
  return buf.readDouble();
}
function parseString(buf: Reader): string {
  return buf.readString();
}
function parseOptional<T>(buf: Reader, innerParse: (buf: Reader) => T): T | undefined {
  return parseBoolean(buf) ? innerParse(buf) : undefined;
}
function parseArray<T>(buf: Reader, innerParse: (buf: Reader) => T): T[] {
  const len = buf.readUVarint();
  const arr = [];
  for (let i = 0; i < len; i++) {
    arr.push(innerParse(buf));
  }
  return arr;
}
