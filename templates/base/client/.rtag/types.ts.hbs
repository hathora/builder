import { Response } from "./base";
import { Writer, Reader, BitString } from "./serde";

export const NO_DIFF = Symbol("NODIFF");
export type DeepPartial<T> = T extends string | number | boolean | undefined
  ? T | typeof NO_DIFF
  : T extends Array<infer ArrayType>
  ? Array<DeepPartial<ArrayType> | typeof NO_DIFF> | typeof NO_DIFF
  : { [K in keyof T]: DeepPartial<T[K]> | typeof NO_DIFF };

{{#each types}}
{{#if alias}}
export type {{@key}} = {{> renderTypeArg}};
{{else if (eq type "enum")}}
export enum {{@key}} {
  {{#each options}}
  {{label}},
  {{/each}}
}
{{else if (eq type "union")}}
export type {{@key}} = {{#each options}}{{#unless @first}} | {{/unless}}{ type: "{{> renderTypeArg}}"; val: {{> renderTypeArg}} }{{/each}};
type {{@key}}Partial = {{#each options}}{{#unless @first}} | {{/unless}}{ type: "{{> renderTypeArg}}"; val: DeepPartial<{{> renderTypeArg}}> }{{/each}};
{{else if (eq type "object")}}
export type {{@key}} = {
  {{#each properties}}
  {{@key}}{{#if (eq type "optional")}}?{{/if}}: {{> renderTypeArg}};
  {{/each}}
};
{{else}}
export type {{@key}} = {{> renderTypeArg}};
{{/if}}
{{/each}}
{{#each methods}}
export type {{makeRequestName @key}} = {
  {{#each properties}}
  {{@key}}{{#if (eq type "optional")}}?{{/if}}: {{> renderTypeArg}};
  {{/each}}
};
{{/each}}

{{#each types}}
{{#if (eq type "object")}}
export const {{@key}} = {
  default(): {{@key}} {
    return {
      {{#each properties}}
      {{@key}}: {{> renderDefault}},
      {{/each}}
    };
  },
  encode(obj: {{@key}}) {
    const buf = new Writer();
    {{#each properties}}
    {{> renderEncodeArg arg=@key}};
    {{/each}}
    return buf.toBuffer();
  },
  encodeDiff(obj: DeepPartial<{{@key}}>) {
    const buf = new Writer();
    const tracker = new BitString();
    {{#each properties}}
    tracker.push(obj.{{@key}} === NO_DIFF ? 0 : 1);
    if (obj.{{@key}} !== NO_DIFF) {
      {{> renderEncodeDiffArg arg=@key}};
    }
    {{/each}}
    const writer = new Writer();
    writer.writeUVarint(tracker.getBits());
    writer.writeBuffer(buf.toBuffer());
    return writer.toBuffer();
  },
  decode(buf: ArrayBufferView | Reader): {{@key}} {
    const sb = ArrayBuffer.isView(buf) ? new Reader(buf) : buf;
    return {
      {{#each properties}}
      {{@key}}: {{> renderDecodeArg}},
      {{/each}}
    };
  },
  decodeDiff(buf: ArrayBufferView | Reader): DeepPartial<{{@key}}> {
    const sb = ArrayBuffer.isView(buf) ? new Reader(buf) : buf;
    const tracker = new BitString(sb.readUVarint());
    return {
      {{#each properties}}
      {{@key}}: tracker.pop() === 1 ? {{> renderDecodeDiffArg}} : NO_DIFF,
      {{/each}}
    };
  },
};
{{else if (eq type "union")}}
export const {{@key}} = {
  values() {
    return [{{#each options}}"{{@key}}"{{#unless @last}}, {{/unless}}{{/each}}];
  },
  encode(obj: {{@key}}) {
    const buf = new Writer();
    writeUInt8(buf, this.values().indexOf(obj.type));
    {{#each options}}
    {{#unless @first}}else {{/unless}}if (obj.type === "{{@key}}") {
      const x = obj.val;
      {{> renderEncodeArg}};
    }
    {{/each}}
    return buf.toBuffer();
  },
  encodeDiff(obj: {{@key}}Partial, tracker: BitString) {
    const buf = new Writer();
    writeUInt8(buf, this.values().indexOf(obj.type));
    {{#each options}}
    {{#unless @first}}else {{/unless}}if (obj.type === "{{@key}}") {
      const x = obj.val;
      {{> renderEncodeDiffArg}};
    }
    {{/each}}
    return buf.toBuffer();
  },
  decode(buf: ArrayBufferView | Reader): {{@key}} {
    const sb = ArrayBuffer.isView(buf) ? new Reader(buf) : buf;
    const type = parseUInt8(sb);
    {{#each options}}
    {{#unless @first}}else {{/unless}}if (type === {{@index}}) {
      return { type: "{{@key}}", val: {{> renderDecodeArg}} };
    }
    {{/each}}
    throw new Error("Invalid union");
  },
  decodeDiff(buf: ArrayBufferView | Reader, tracker: BitString): {{@key}}Partial {
    const sb = ArrayBuffer.isView(buf) ? new Reader(buf) : buf;
    const type = parseUInt8(sb);
    {{#each options}}
    {{#unless @first}}else {{/unless}}if (type === {{@index}}) {
      return { type: "{{@key}}", val: {{> renderDecodeDiffArg}} };
    }
    {{/each}}
    throw new Error("Invalid union");
  },
}
{{/if}}
{{/each}}
{{#each methods}}
export const {{makeRequestName @key}} = {
  default(): {{makeRequestName @key}} {
    return {
      {{#each properties}}
      {{@key}}: {{> renderDefault}},
      {{/each}}
    };
  },
  encode(obj: {{makeRequestName @key}}) {
    const buf = new Writer();
    {{#each properties}}
    {{> renderEncodeArg arg=@key}};
    {{/each}}
    return buf.toBuffer();
  },
  decode(buf: ArrayBufferView | Reader): {{makeRequestName @key}} {
    const sb = ArrayBuffer.isView(buf) ? new Reader(buf) : buf;
    return {
      {{#each properties}}
      {{@key}}: {{> renderDecodeArg}},
      {{/each}}
    };
  }
}
{{/each}}
{{#*inline "renderTypeArg"}}
{{#if alias}}
{{typeString}}
{{~else if (eq type "optional")}}
{{> renderTypeArg item}}
{{~else if (eq type "array")}}
{{> renderTypeArg items}}[]
{{~else if (eq type "int")}}
number
{{~else if (eq type "float")}}
number
{{~else if (eq type "string")}}
string
{{~else if (eq type "boolean")}}
boolean
{{~else if (eq type "plugin")}}
{{> renderTypeArg item}}
{{~/if}}
{{~/inline}}
{{#*inline "renderDefault"}}
{{#if (eq type "array")}}
[]
{{~else if (eq type "int")}}
0
{{~else if (eq type "float")}}
0.0
{{~else if (eq type "string")}}
""
{{~else if (eq type "enum")}}
0
{{~else if (eq type "boolean")}}
false
{{~else if (eq type "optional")}}
undefined
{{~else if (eq type "object")}}
{{typeString}}.default()
{{~else if (eq type "union")}}
{{#each options}}
{{#if @first}}
{ type: "{{@key}}", val: {{> renderDefault}} }
{{~/if}}
{{/each}}
{{~else if (eq type "plugin")}}
{{> renderDefault item}}
{{/if}}
{{/inline}}
{{#*inline "renderEncodeArg"}}
{{#if (eq type "optional")}}
writeOptional(buf, obj.{{arg}}, (x) => {{> renderEncodeArg item}})
{{~else if (eq type "array")}}
writeArray(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}}, (x) => {{> renderEncodeArg items}})
{{~else if (eq type "enum")}}
writeUInt8(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "int")}}
writeInt(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "float")}}
writeFloat(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "string")}}
writeString(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "boolean")}}
writeBoolean(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "plugin")}}
{{> renderEncodeArg item arg=arg}}
{{~else}}
{{#if arg}}{{typeString}}.encode(obj.{{arg}}){{else}}buf.writeBuffer({{typeString}}.encode(x)){{/if}}
{{~/if}}
{{/inline}}
{{#*inline "renderEncodeDiffArg"}}
{{#if (eq type "optional")}}
writeOptional(buf, obj.{{arg}}, (x) => {{> renderEncodeDiffArg item}})
{{~else if (eq type "array")}}
writeArrayDiff(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}}, (x) => {{> renderEncodeDiffArg items}})
{{~else if (eq type "enum")}}
writeUInt8(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "int")}}
writeInt(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "float")}}
writeFloat(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "string")}}
writeString(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "boolean")}}
writeBoolean(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "plugin")}}
{{> renderEncodeDiffArg item arg=arg}}
{{~else}}
{{#if arg}}{{typeString}}.encodeDiff(obj.{{arg}}){{else}}buf.writeBuffer({{typeString}}.encodeDiff(x)){{/if}}
{{~/if}}
{{/inline}}
{{#*inline "renderDecodeArg"}}
{{#if (eq type "optional")}}
parseOptional(sb, () => {{> renderDecodeArg item}})
{{~else if (eq type "array")}}
parseArray(sb, () => {{> renderDecodeArg items}})
{{~else if (eq type "enum")}}
parseUInt8(sb)
{{~else if (eq type "int")}}
parseInt(sb)
{{~else if (eq type "float")}}
parseFloat(sb)
{{~else if (eq type "string")}}
parseString(sb)
{{~else if (eq type "boolean")}}
parseBoolean(sb)
{{~else if (eq type "plugin")}}
{{> renderDecodeArg item}}
{{~else}}
{{typeString}}.decode(sb)
{{~/if}}
{{/inline}}
{{#*inline "renderDecodeDiffArg"}}
{{#if (eq type "optional")}}
parseOptional(sb, () => {{> renderDecodeDiffArg item}})
{{~else if (eq type "array")}}
parseArrayDiff(sb, () => {{> renderDecodeDiffArg items}})
{{~else if (eq type "enum")}}
parseUInt8(sb)
{{~else if (eq type "int")}}
parseInt(sb)
{{~else if (eq type "float")}}
parseFloat(sb)
{{~else if (eq type "string")}}
parseString(sb)
{{~else if (eq type "boolean")}}
parseBoolean(sb)
{{~else if (eq type "plugin")}}
{{> renderDecodeDiffArg item}}
{{~else}}
{{typeString}}.decodeDiff(sb)
{{~/if}}
{{/inline}}

export function encodeStateUpdate(
  stateDiff: DeepPartial<{{userState}}> | undefined,
  responses: Record<number, Response>
) {
  const buf = new Writer();
  writeOptional(buf, stateDiff, (x) => buf.writeBuffer({{userState}}.encodeDiff(x)));
  Object.entries(responses).forEach(([msgId, response]) => {
    buf.writeUInt32(Number(msgId));
    const maybeError = response.type === "error" ? response.error : undefined;
    writeOptional(buf, maybeError, (x) => writeString(buf, x));
  });
  return buf.toBuffer();
}
export function decodeStateUpdate(buf: ArrayBufferView | Reader): {
  stateDiff?: DeepPartial<{{userState}}>;
  responses: Record<number, Response>;
} {
  const sb = ArrayBuffer.isView(buf) ? new Reader(buf) : buf;
  const stateDiff = parseOptional(sb, () => {{userState}}.decodeDiff(sb));
  const responses: Record<number, Response> = {};
  while (sb.remaining() > 0) {
    const msgId = sb.readUInt32();
    const maybeError = parseOptional(sb, () => parseString(sb));
    responses[msgId] = maybeError === undefined ? Response.ok() : Response.error(maybeError);
  }
  return { stateDiff, responses };
}

function writeUInt8(buf: Writer, x: number) {
  buf.writeUInt8(x);
}
function writeBoolean(buf: Writer, x: boolean) {
  buf.writeUInt8(x ? 1 : 0);
}
function writeInt(buf: Writer, x: number) {
  buf.writeVarint(x);
}
function writeFloat(buf: Writer, x: number) {
  buf.writeFloat(x);
}
function writeString(buf: Writer, x: string) {
  buf.writeString(x);
}
function writeOptional<T>(buf: Writer, x: T | undefined, innerWrite: (x: T) => void) {
  writeBoolean(buf, x !== undefined);
  if (x !== undefined) {
    innerWrite(x);
  }
}
function writeArray<T>(buf: Writer, x: T[], innerWrite: (x: T) => void) {
  buf.writeUVarint(x.length);
  for (let i = 0; i < x.length; i++) {
    innerWrite(x[i]);
  }
}
function writeArrayDiff<T>(buf: Writer, x: (T | typeof NO_DIFF)[], innerWrite: (x: T) => void) {
  buf.writeUVarint(x.length);
  for (let i = 0; i < x.length; i++) {
    const val = x[i];
    if (val === NO_DIFF) {
      writeBoolean(buf, false);
    } else {
      writeBoolean(buf, true);
      innerWrite(val);
    }
  }
}

function parseUInt8(buf: Reader): number {
  return buf.readUInt8();
}
function parseBoolean(buf: Reader): boolean {
  return buf.readUInt8() > 0;
}
function parseInt(buf: Reader): number {
  return buf.readVarint();
}
function parseFloat(buf: Reader): number {
  return buf.readFloat();
}
function parseString(buf: Reader): string {
  return buf.readString();
}
function parseOptional<T>(buf: Reader, innerParse: (buf: Reader) => T): T | undefined {
  return parseBoolean(buf) ? innerParse(buf) : undefined;
}
function parseArray<T>(buf: Reader, innerParse: () => T): T[] {
  const len = buf.readUVarint();
  const arr = [];
  for (let i = 0; i < len; i++) {
    arr.push(innerParse());
  }
  return arr;
}
function parseArrayDiff<T>(buf: Reader, innerParse: () => T): (T | typeof NO_DIFF)[] {
  const len = buf.readUVarint();
  const arr = [];
  for (let i = 0; i < len; i++) {
    if (parseBoolean(buf)) {
      arr.push(innerParse());
    } else {
      arr.push(NO_DIFF);
    }
  }
  return arr;
}
