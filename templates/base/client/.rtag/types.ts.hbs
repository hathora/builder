{{#each types}}
{{#if (eq type "enum")}}
export enum {{@key}} {
  {{#each options}}
  {{label}},
  {{/each}}
}
{{else if (eq type "object")}}
export type {{@key}} = {
  {{#each properties}}
  {{@key}}: {{> renderArg}};
  {{/each}}
}
{{else}}
export type {{@key}} = {{> renderArg}};
{{/if}}
{{/each}}
{{#each methods}}
export interface {{makeRequestName @key}} {
{{#each properties}}
  {{@key}}: {{> renderArg}};
{{/each}}
}
{{/each}}
export enum Method {
  {{#each methods}}
  {{#if (ne @key ../initialize)}}
  {{uppercase @key}},
  {{/if}}
  {{/each}}
}
export interface OkResponse {
  type: "ok";
}
export interface ErrorResponse {
  type: "error";
  error: {{error.typeString}};
}
export type Response = OkResponse | ErrorResponse;
export const Response: { ok: () => OkResponse; error: (error: {{error.typeString}}) => ErrorResponse } = {
  ok: () => ({
    type: "ok",
  }),
  error: (error: {{error.typeString}}) => ({
    type: "error",
    error,
  }),
};
{{#each auth}}
export interface {{capitalize @key}}UserData {
  type: "{{@key}}";
  id: string;
{{#if (eq @key "anonymous")}}
  name: string;
{{else if (eq @key "google")}}
  name: string;
  email: string;
  locale: string;
  picture: string;
{{/if}}
}
{{/each}}
export type UserData = {{#each auth}}{{capitalize @key}}UserData{{#unless @last}} | {{/unless}}{{/each}};
{{#*inline "renderArg"}}
{{#if alias}}
{{typeString}}
{{~else if (eq type "optional")}}
{{> renderArg item}} | undefined
{{~else if (eq type "array")}}
{{> renderArg items}}[]
{{~else if (eq type "number")}}
number
{{~else if (eq type "string")}}
string
{{~else if (eq type "boolean")}}
boolean
{{~else if (eq type "plugin")}}
{{> renderArg item}}
{{~/if}}
{{~/inline}}