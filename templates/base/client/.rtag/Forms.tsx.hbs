import React, { useState } from "react";
import ReactDOM from "react-dom";
import {
  {{#each methods}}
  {{#if (ne @key ../initialize)}}
  {{makeRequestName @key}},
  {{/if}}
  {{/each}}
  {{#each types}}
  {{@key}},
  {{/each}}
} from "./types";

type MethodProps<T> = {
  method: string;
  initialize: () => T;
  children: (value: T, update: (value: T) => void) => JSX.Element;
};
type BaseProps<T> = {
  value: T;
  update: (value: T) => void;
};
type ObjectProps<T> = BaseProps<T> & {
  children: (value: T, update: (value: any, key: string) => void) => JSX.Element;
};
type ArrayProps<T> = BaseProps<T[]> & {
  initialVal: T;
  children: (i: number, value: T, update: (value: T, idx: number) => void) => JSX.Element;
};
type OptionalProps<T> = BaseProps<T | undefined> & {
  initialVal: T;
  children: (value: T, update: (value: T) => void) => JSX.Element;
};
type EnumProps = BaseProps<number> & { enum: object };

function MethodForm<T>(props: MethodProps<T>) {
  const [value, setValue] = useState<T>(props.initialize());
  console.log("MethodForm", value);
  return (
    <div className="method-form">
      <h3>{props.method}</h3>
      {props.children(value, (val) => {
        setValue({ ...val });
      })}
      <button onClick={() => setValue(props.initialize())}>Submit</button>
    </div>
  );
}

function ObjectInput<T>(props: ObjectProps<T>) {
  return (
    <div className="object-input">
      {props.children(props.value, (val, key) => {
        props.update(Object.assign(props.value, { [key!]: val }));
      })}
    </div>
  );
}

function ArrayInput<T>(props: ArrayProps<T>) {
  function swapArgs(i1: number, i2: number) {
    [props.value[i1], props.value[i2]] = [props.value[i2], props.value[i1]];
    props.update(props.value);
  }
  function deleteArg(i: number) {
    props.value.splice(i, 1);
    props.update(props.value);
  }
  return (
    <div className="array-input">
      {props.value.map((item, i) => (
        <div key={i} className="array-item">
          {props.children(i, item, (val, idx) => {
            props.update(Object.assign(props.value, { [idx!]: val }));
          })}
          <button disabled={i === 0} onClick={() => swapArgs(i, i - 1)}>
            &#8593;
          </button>
          <button disabled={i === props.value.length - 1} onClick={() => swapArgs(i, i + 1)}>
            &#8595;
          </button>
          <button onClick={() => deleteArg(i)}>x</button>
        </div>
      ))}
      <button onClick={() => props.update(props.value.concat(props.initialVal))}>Add</button>
    </div>
  );
}

function OptionalInput<T>(props: OptionalProps<T>) {
  return (
    <div className="optional-input">
      {props.value !== undefined
        ? props.children(props.value, (val) => {
            props.update(val);
          })
        : ""}
      <button onClick={() => (props.value === undefined ? props.update(props.initialVal) : props.update(undefined))}>
        Toggle
      </button>
    </div>
  );
}

function EnumInput(props: EnumProps) {
  return (
    <div className="enum-input">
      <select value={props.value} onChange={(e) => props.update(Number(e.target.value))}>
        {Object.entries(props.enum)
          .filter(([_, value]) => typeof value === "number")
          .map(([label, value]) => (
            <option key={value} value={value}>
              {label}
            </option>
          ))}
      </select>
    </div>
  );
}

function StringInput(props: BaseProps<string>) {
  return (
    <div className="string-input">
      <input type="text" value={props.value} onChange={(e) => props.update(e.target.value)}></input>
    </div>
  );
}

function NumberInput(props: BaseProps<number>) {
  return (
    <div className="number-input">
      <input type="number" value={props.value} onChange={(e) => props.update(Number(e.target.value))}></input>
    </div>
  );
}

function Forms() {
  return (
    <>
      {{#each methods}}
      {{#if (ne @key ../initialize)}}
      <MethodForm<{{makeRequestName @key}}> method="{{@key}}" initialize={ {{makeRequestName @key}}.default }>
        {(value, update) => (
          <>
            {{> renderForm}}
          </>
        )}
      </MethodForm>
      {{/if}}
      {{/each}}
    </>
  );
}

ReactDOM.render(<Forms />, document.getElementById("root"));
{{#*inline "renderForm"}}
{{#if (eq type "plugin")}}
{{#with item}}
{{> renderForm arg=../arg}}
{{/with}}
{{else if (eq type "object")}}
<ObjectInput<{{> renderTypeArg}}> {{#if (eq arg "_arr")}}value={value} update={(v) => update(v, idx)}{{else if arg}}value={value.{{arg}} } update={(v) => update(v, "{{arg}}")}{{else}}value={value} update={(v) => update(v)}{{/if}}>
  {(value, update) => (
    <>
      {{#each properties}}
      {{> renderForm arg=@key}}
      {{/each}}
    </>
  )}
</ObjectInput>
{{else if (eq type "array")}}
<ArrayInput<{{> renderTypeArg items}}> {{#if (eq arg "_arr")}}value={value} update={(v) => update(v, idx)}{{else if arg}}value={value.{{arg}} } update={(v) => update(v, "{{arg}}")}{{else}}value={value} update={(v) => update(v)}{{/if}} initialVal={ {{> renderDefault items}} }>
  {(idx, value, update) => (
    {{> renderForm items arg="_arr"}}
  )}
</ArrayInput>
{{else if (eq type "optional")}}
<OptionalInput<{{> renderTypeArg}}> {{#if (eq arg "_arr")}}value={value} update={(v) => update(v, idx)}{{else if arg}}value={value.{{arg}} } update={(v) => update(v, "{{arg}}")}{{else}}value={value} update={(v) => update(v)}{{/if}} initialVal={ {{> renderDefault item}} }>
  {(value, update) => (
    {{> renderForm item}}
  )}
</OptionalInput>
{{else if (eq type "union")}}
NOT IMPLEMENTED
{{else if (eq type "enum")}}
<EnumInput {{#if (eq arg "_arr")}}value={value} update={(v) => update(v, idx)}{{else if arg}}value={value.{{arg}} } update={(v) => update(v, "{{arg}}")}{{else}}value={value} update={(v) => update(v)}{{/if}} enum={ {{typeString}} } />
{{else if (eq type "string")}}
<StringInput {{#if (eq arg "_arr")}}value={value} update={(v) => update(v, idx)}{{else if arg}}value={value.{{arg}} } update={(v) => update(v, "{{arg}}")}{{else}}value={value} update={(v) => update(v)}{{/if}} />
{{else if (eq type "number")}}
<NumberInput {{#if (eq arg "_arr")}}value={value} update={(v) => update(v, idx)}{{else if arg}}value={value.{{arg}} } update={(v) => update(v, "{{arg}}")}{{else}}value={value} update={(v) => update(v)}{{/if}} />
{{else if (eq type "boolean")}}
<BooleanInput {{#if (eq arg "_arr")}}value={value} update={(v) => update(v, idx)}{{else if arg}}value={value.{{arg}} } update={(v) => update(v, "{{arg}}")}{{else}}value={value} update={(v) => update(v)}{{/if}} />
{{/if}}
{{/inline}}
{{#*inline "renderTypeArg"}}
{{#if alias}}
{{typeString}}
{{~else if (eq type "optional")}}
{{> renderTypeArg item}}
{{~else if (eq type "array")}}
{{> renderTypeArg items}}[]
{{~else if (eq type "number")}}
number
{{~else if (eq type "string")}}
string
{{~else if (eq type "boolean")}}
boolean
{{~else if (eq type "plugin")}}
{{> renderTypeArg item}}
{{~else}}
{{makeRequestName @key}}
{{~/if}}
{{/inline}}
{{#*inline "renderDefault"}}
{{#if (eq type "array")}}
[]
{{~else if (eq type "number")}}
0
{{~else if (eq type "string")}}
""
{{~else if (eq type "enum")}}
0
{{~else if (eq type "boolean")}}
false
{{~else if (eq type "optional")}}
undefined
{{~else if (eq type "object")}}
{{typeString}}.default()
{{/if}}
{{/inline}}