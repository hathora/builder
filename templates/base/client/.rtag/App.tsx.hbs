import React, { useEffect, useState } from "react";
import ReactDOM from "react-dom";
{{#if auth.google}}
import { GoogleLogin } from "react-google-login";
{{/if}}
import { RtagClient, RtagConnection } from "./client";
import { {{userState}} as UserState } from "./types";
import { RtagContext } from "./context";
import { Forms, InitializeForm } from "./Forms";
import { State } from "./State";

const client = new RtagClient(import.meta.env.VITE_APP_ID);

function App() {
  const [connection, setConnection] = useState<RtagConnection>();
  const [state, setState] = useState<UserState>();
  const [token, setToken] = useState<string | null>(sessionStorage.getItem("token"));

  useEffect(() => {
    const path = location.pathname;
    if (path.startsWith("/state/") && token !== null) {
      const stateId = path.split("/state/").pop()!;
      if (stateId !== connection?.stateId) {
        client.connectExisting(token, stateId, setState).then(setConnection);
      }
    }
  }, [connection, token]);

  if (token === null) {
    return (
      <div>
        <h2>Login</h2>
{{#each auth}}
{{#if (eq @key "anonymous")}}
        <button
          onClick={() =>
            client.loginAnonymous().then((token) => {
              sessionStorage.setItem("token", token);
              setToken(token);
            })
          }
        >
          <span>Login Anonymously</span>
        </button>
{{else if (eq @key "google")}}
        <GoogleLogin
          clientId="{{clientId}}"
          onSuccess={({ tokenId }: any) =>
            client.loginGoogle(tokenId).then((token) => {
              sessionStorage.setItem("token", token);
              setToken(token);
            })
          }
        />
{{/if}}
{{/each}}
      </div>
    );
  }

  if (connection === undefined) {
    return (
      <div>
        <h2>Home</h2>
        <InitializeForm
          submit={(request) =>
            client.connectNew(token, request, setState).then((conn) => {
              history.pushState({}, "", `/state/${conn.stateId}`);
              setConnection(conn);
            })
          }
        />
        <button>Join existing</button>
      </div>
    );
  }

  if (state === undefined) {
    return <div>Loading...</div>;
  }

  return (
    <RtagContext.Provider value=\{{ connection, state }}>
      <Forms />
      <State />
    </RtagContext.Provider>
  );
}

ReactDOM.render(<App />, document.getElementById("root"));
