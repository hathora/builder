import React, { useEffect, useState } from "react";
import ReactDOM from "react-dom";
import { BrowserRouter, Route, Routes, useLocation, useNavigate, useParams } from "react-router-dom";
import { ToastContainer, Zoom, toast } from "react-toastify";
import { Disclosure } from "@headlessui/react";
import { LightningBoltIcon, UserCircleIcon } from "@heroicons/react/solid";
{{#if auth.google}}
import { GoogleLogin } from "react-google-login";
{{/if}}
import { RtagClient, RtagConnection } from "./client";
import { {{makeRequestName initialize}}, {{userState}} as UserState } from "./types";
import { RtagContext } from "./context";
import { Forms, InitializeForm } from "./Forms";
import { State } from "./State";

const client = new RtagClient(import.meta.env.VITE_APP_ID);

function App() {
  const [connection, setConnection] = useState<RtagConnection>();
  const [state, setState] = useState<UserState>();
  const [token, setToken] = useState<string | null>(sessionStorage.getItem("token"));
  const [openMethods, setOpenMethods] = useState(false);
  const location = useLocation();
  const navigate = useNavigate();

  useEffect(() => {
    if (location.hash.length > 0) {
      sessionStorage.setItem("token", location.hash.substring(1));
      setToken(location.hash.substring(1));
      navigate(location.pathname, { replace: true });
    }
  }, [location]);

  if (token === null) {
    return (
      <>
        <NavBar />
        <div className="py-6 sm:px-6 lg:px-8">
          <Login setToken={setToken} />
        </div>
      </>
    );
  }

  return (
    <div>
      <NavBar token={token} />
      <div id="app" className="py-6 sm:px-6 lg:px-8">
        <Routes>
          <Route
            path="/state/:stateId"
            element={
              <Main
                state={state}
                connection={connection}
                onConnect={(stateId) =>
                  client
                    .connectExisting(token, stateId, setState)
                    .then((conn) => setConnection(conn))
                    .catch((e) => toast.error("Connection error: " + e.reason))
                }
                onDisconnect={() => {
                  if (connection !== undefined) {
                    connection.disconnect();
                    setConnection(undefined);
                    setState(undefined);
                  }
                }}
                openMethods={openMethods}
                setOpenMethods={setOpenMethods}
              />
            }
          />
          <Route
            path="/"
            element={
              <Home
                onConnect={(request) =>
                  client
                    .connectNew(token, request, setState)
                    .then((conn) => {
                      setConnection(conn);
                      navigate(`/state/${conn.stateId}`);
                    })
                    .catch((e) => toast.error("Connection error: " + e.reason))
                }
              />
            }
          />
          <Route path="*" element={<div>Not Found</div>} />
        </Routes>
      </div>
    </div>
  );
}

function NavBar({ token }: { token?: string }) {
  const navigate = useNavigate();
  const user = token !== undefined ? RtagClient.getUserFromToken(token) : undefined;
  return (
    <Disclosure as="nav" className="bg-indigo-500">
      {() => (
        <>
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex items-center justify-between h-16">
              <div className="flex items-center">
                <div className="flex-shrink-0 cursor-pointer" onClick={() => navigate(`/`)}>
                  <img
                    className="h-10 w-10"
                    src="https://i.ibb.co/sQMmTTq/hathora-hammer-logo-light.png"
                    alt="hathora-hammer-logo"
                  />
                </div>
                <div className="flex-shrink-0 flex items-center cursor-pointer" onClick={() => navigate(`/`)}>
                  <span className="font-display font-semibold text-2xl text-white mt-1 ml-3 uppercase">{{appName}}</span>
                </div>
                {user && (
                  <div className="hidden md:block">
                    <div className="ml-10 flex items-baseline space-x-4">
                      <span
                        key={user.name}
                        className="bg-indigo-700 text-gray-200 px-3 py-2 rounded-md text-sm font-medium"
                      >
                        <UserCircleIcon
                          className="inline flex-shrink-0 mr-1.5 h-5 w-5 text-gray-200"
                          aria-hidden="true"
                        />
                        {user.name}
                      </span>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </>
      )}
    </Disclosure>
  );
}

function MethodButton({ setOpenMethods }: { setOpenMethods: (v: boolean) => void }) {
  return (
    <div className="fixed top-24 right-6 lg:right-8">
      <span className="sm:ml-3">
        <button
          type="button"
          onClick={() => setOpenMethods(true)}
          className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        >
          <LightningBoltIcon className="-ml-1 mr-2 h-5 w-5" aria-hidden="true" />
          Methods
        </button>
      </span>
    </div>
  );
}

function Login({ setToken }: { setToken: (token: string) => void }) {
  return (
    <div className="login w-full flex flex-col md:justify-center">
      <div className="w-6/12 m-auto">
        <h2 className="text-base text-xl font-semibold text-gray-900">Login</h2>
        <div className="flex flex-col mt-2">
{{#each auth}}
{{#if (eq @key "anonymous")}}
          <div className="w-6/12 mb-4">
            <button
              type="button"
              onClick={() =>
                client
                  .loginAnonymous()
                  .then((token) => {
                    sessionStorage.setItem("token", token);
                    setToken(token);
                  })
                  .catch((e) => toast.error("Authentication error: " + e.reason))
              }
              className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              Login (Anonymous)
            </button>
          </div>
{{else if (eq @key "google")}}
          <div className="w-6/12">
            <GoogleLogin
              clientId="848412826788-m4msrb6q44dm2ue3kgvui0fq7kda55ls.apps.googleusercontent.com"
              onSuccess={({ tokenId }: any) =>
                client
                  .loginGoogle(tokenId)
                  .then((token) => {
                    sessionStorage.setItem("token", token);
                    setToken(token);
                  })
                  .catch((e) => toast.error("Authentication error: " + e.reason))
              }
            />
          </div>
{{/if}}
{{/each}}
        </div>
      </div>
    </div>
  );
}

function Home({ onConnect }: { onConnect: (request: {{makeRequestName initialize}}) => void }) {
  const [stateId, setStateId] = useState<string>("");
  const navigate = useNavigate();
  return (
    <div className="home w-full flex flex-col md:justify-center">
      <div className="w-6/12 m-auto">
        <h2 className="text-base text-xl font-semibold text-gray-900">Home</h2>
        <div className="flex flex-col mt-2">
          <div className="w-6/12 mb-4">
            <InitializeForm submit={onConnect} />
          </div>
          <div className="w-6/12">
            <input
              type="text"
              value={stateId}
              onChange={(e) => setStateId(e.target.value)}
              className="focus:ring-indigo-500 focus:border-indigo-500 mb-2 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md"
            />
            <button
              type="button"
              onClick={() => navigate(`/state/${stateId}`)}
              className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              Join Existing
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

type MainProps = {
  state: UserState | undefined;
  connection: RtagConnection | undefined;
  onConnect: (stateId: string) => void;
  onDisconnect: () => void;
  openMethods: boolean;
  setOpenMethods: (v: boolean) => void;
};
function Main({ state, connection, onConnect, onDisconnect, openMethods, setOpenMethods }: MainProps) {
  const { stateId } = useParams();
  useEffect(() => {
    if (connection === undefined) {
      onConnect(stateId!);
    }
    return onDisconnect;
  }, [connection]);

  if (state === undefined || connection === undefined) {
    return <div>Loading...</div>;
  }

  return (
    <RtagContext.Provider value=\{{ connection, state }}>
      <MethodButton setOpenMethods={setOpenMethods} />
      <State />
      <Forms open={openMethods} setOpen={setOpenMethods} />
    </RtagContext.Provider>
  );
}

ReactDOM.render(
  <BrowserRouter>
    <App />
    <ToastContainer position="top-center" autoClose={2000} transition={Zoom} hideProgressBar />
  </BrowserRouter>,
  document.getElementById("root")
);
