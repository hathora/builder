import React, { useEffect, useState } from "react";
import ReactDOM from "react-dom";
import { ToastContainer, Zoom, toast } from "react-toastify";
{{#if auth.google}}
import { GoogleLogin } from "react-google-login";
{{/if}}
import { RtagClient, RtagConnection } from "./client";
import { {{userState}} as UserState } from "./types";
import { RtagContext } from "./context";
import { Forms, InitializeForm } from "./Forms";
import { State } from "./State";

const client = new RtagClient(import.meta.env.VITE_APP_ID);

function App() {
  const [connection, setConnection] = useState<RtagConnection>();
  const [state, setState] = useState<UserState>();
  const [token, setToken] = useState<string | null>(sessionStorage.getItem("token"));

  useEffect(() => {
    if (location.hash.length > 0) {
      sessionStorage.setItem("token", location.hash.substring(1));
      setToken(location.hash.substring(1));
      history.replaceState({}, "", location.pathname);
    }
    const path = location.pathname;
    if (path.startsWith("/state/") && token !== null) {
      const stateId = path.split("/state/").pop() ?? "";
      if (stateId !== connection?.stateId) {
        client
          .connectExisting(token, stateId, setState)
          .then(setConnection)
          .catch((e) => toast.error("Connection error: " + e.reason));
      }
    }
  }, [connection, token]);

  if (token === null) {
    return <Login setToken={setToken} />;
  }

  if (connection === undefined) {
    return <Home token={token} setState={setState} setConnection={setConnection} />;
  }

  if (state === undefined) {
    return <div>Loading...</div>;
  }

  return (
    <RtagContext.Provider value=\{{ connection, state }}>
      <State />
      <Forms />
    </RtagContext.Provider>
  );
}

function Login({ setToken }: { setToken: (token: string) => void }) {
  return (
    <div className="login">
      <h2>Login</h2>
{{#each auth}}
{{#if (eq @key "anonymous")}}
      <button
        onClick={() =>
          client
            .loginAnonymous()
            .then((token) => {
              sessionStorage.setItem("token", token);
              setToken(token);
            })
            .catch((e) => toast.error("Authentication error: " + e.reason))
        }
      >
        <span>Login Anonymously</span>
      </button>
{{else if (eq @key "google")}}
      <GoogleLogin
        clientId="{{clientId}}"
        onSuccess={({ tokenId }: any) =>
          client
            .loginGoogle(tokenId)
            .then((token) => {
              sessionStorage.setItem("token", token);
              setToken(token);
            })
            .catch((e) => toast.error("Authentication error: " + e.reason))
        }
      />
{{/if}}
{{/each}}
    </div>
  );
}

type HomeProps = { token: string; setState: (state: UserState) => void; setConnection: (conn: RtagConnection) => void };
function Home({ token, setState, setConnection }: HomeProps) {
  const [stateId, setStateId] = useState<string>("");
  return (
    <div className="home">
      <h2>Home</h2>
      <InitializeForm
        submit={(request) =>
          client
            .connectNew(token, request, setState)
            .then((conn) => {
              history.pushState({}, "", `/state/${conn.stateId}`);
              setConnection(conn);
            })
            .catch((e) => toast.error("Connection error: " + e.reason))
        }
      />
      <input type="text" value={stateId} onChange={(e) => setStateId(e.target.value)}></input>
      <button
        onClick={() =>
          client
            .connectExisting(token, stateId, setState)
            .then((conn) => {
              history.pushState({}, "", `/state/${conn.stateId}`);
              setConnection(conn);
            })
            .catch((e) => toast.error("Connection error: " + e.reason))
        }
      >
        Join existing
      </button>
    </div>
  );
}

ReactDOM.render(
  <>
    <App />
    <ToastContainer position="top-center" autoClose={2000} transition={Zoom} hideProgressBar />
  </>,
  document.getElementById("root")
);
