import WebSocket from "isomorphic-ws";
// @ts-ignore
import getRandomValues from "get-random-values";
import axios from "axios";
import jwtDecode from "jwt-decode";
import { UserData, Response, Method } from "./base";
import { computePatch } from "./patch";
import {
  decodeStateUpdate,
  {{userState}} as UserState,
  {{#each methods}}
  {{makeRequestName @key}},
  {{/each}}
} from "./types";

const COORDINATOR_HOST = "rtag.dev";

export type StateId = string;
export type UpdateArgs = { state: UserState; updatedAt: number };

export class RtagClient {
  public constructor(private appId: string) {}

  public static getUserFromToken(token: string): UserData {
    return jwtDecode(token);
  }

{{#each auth}}
{{#if (eq @key "anonymous")}}
  public async loginAnonymous(): Promise<string> {
    return (await axios.post(`https://${COORDINATOR_HOST}/${this.appId}/login/anonymous`)).data.token;
  }

{{else if (eq @key "google")}}
  public async loginGoogle(idToken: string): Promise<string> {
    return (await axios.post(`https://${COORDINATOR_HOST}/${this.appId}/login/google`, { idToken })).data.token;
  }

{{/if}}
{{/each}}
  public connectNew(
    token: string,
    request: {{makeRequestName initialize}},
    onUpdate: (updateArgs: UpdateArgs) => void,
    onConnectionFailure: (error: string) => void
  ): Promise<RtagConnection> {
    return new Promise((resolve) => {
      const socket = this.initSocket(onConnectionFailure);
      socket.onopen = () => {
        socket.send(token);
        socket.send({{makeRequestName initialize}}.encode(request));
      };
      socket.onmessage = ({ data }) => {
        resolve(new RtagConnection(data as string, socket, onUpdate));
      };
    });
  }

  public connectExisting(
    token: string,
    stateId: StateId,
    onUpdate: (updateArgs: UpdateArgs) => void,
    onConnectionFailure: (error: string) => void
  ): Promise<RtagConnection> {
    return new Promise((resolve) => {
      const socket = this.initSocket(onConnectionFailure);
      socket.onopen = () => {
        socket.send(token);
        socket.send(stateId);
      };
      socket.onmessage = () => {
        resolve(new RtagConnection(stateId, socket, onUpdate));
      };
    });
  }

  private initSocket(reject: (reason?: any) => void) {
    const socket = new WebSocket(`wss://${COORDINATOR_HOST}/${this.appId}`);
    socket.binaryType = "arraybuffer";
    socket.onerror = reject;
    socket.onclose = reject;
    return socket;
  }
}

export class RtagConnection {
  private callbacks: Record<string, (response: Response) => void> = {};
  private state?: UserState = undefined;

  public constructor(public stateId: StateId, private socket: WebSocket, onUpdate: (updateArgs: UpdateArgs) => void) {
    socket.onmessage = ({ data }) => {
      if (this.state === undefined) {
        this.state = UserState.decode(new Uint8Array(data as ArrayBuffer));
        onUpdate({ state: JSON.parse(JSON.stringify(this.state)), updatedAt: 0 });
      } else {
        const { stateDiff, changedAt, responses } = decodeStateUpdate(new Uint8Array(data as ArrayBuffer));
        if (stateDiff !== undefined) {
          this.state = computePatch(this.state, stateDiff);
          onUpdate({ state: JSON.parse(JSON.stringify(this.state)), updatedAt: changedAt });
        }
        Object.entries(responses).forEach(([msgId, response]) => {
          if (msgId in this.callbacks) {
            this.callbacks[msgId](response);
            delete this.callbacks[msgId];
          }
        });
      }
    };
  }

  {{#each methods}}
  {{#if (ne @key ../initialize)}}
  public {{@key}}(request: {{makeRequestName @key}}): Promise<Response> {
    return this.callMethod(Method.{{uppercase @key}}, {{makeRequestName @key}}.encode(request));
  }

  {{/if}}
  {{/each}}
  public disconnect(): void {
    this.socket.onclose = () => {};
    this.socket.close();
  }

  private callMethod(method: Method, request: Uint8Array): Promise<Response> {
    return new Promise((resolve, reject) => {
      if (this.socket.readyState === this.socket.CLOSED) {
        reject("Connection is closed");
      } else {
        const msgId: Uint8Array = getRandomValues(new Uint8Array(4));
        this.socket.send(new Uint8Array([...new Uint8Array([method]), ...msgId, ...request]));
        this.callbacks[new DataView(msgId.buffer).getUint32(0, true)] = resolve;
      }
    });
  }
}
