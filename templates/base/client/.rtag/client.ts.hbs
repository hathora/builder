import WebSocket from "isomorphic-ws";
import axios from "axios";
import jwtDecode from "jwt-decode";
import { decode, encode } from "@msgpack/msgpack";
import {
  UserData,
  {{userState}} as UserState,
  {{#each methods}}
  {{makeRequestName @key}},
  {{/each}}
} from "./types";

export type StateId = string;

export class RtagClient {
  private callbacks: Record<string, (response: {{error.typeString}} | undefined) => void> = {};

  private constructor(private socket: WebSocket) {}

  public static getUserFromToken(token: string): UserData {
    return jwtDecode(token);
  }

{{#each auth}}
{{#if (eq @key "anonymous")}}
  public static async loginAnonymous(origin: string = ""): Promise<string> {
    return (await axios.post(`${origin}/login/anonymous`)).data.token;
  }

{{else if (eq @key "google")}}
  public static async loginGoogle(idToken: string, origin: string = ""): Promise<string> {
    return (await axios.post(`${origin}/login/google`, { idToken })).data.token;
  }

{{/if}}
{{/each}}
  public static connectNew(
    host: string,
    token: string,
    request: ICreateGameRequest,
    onStateChange: (state: UserState) => void
  ): Promise<{ stateId: string; client: RtagClient }> {
    return new Promise((resolve, reject) => {
      const socket = new WebSocket(`ws://${host}`);
      socket.binaryType = "arraybuffer";
      const client = new RtagClient(socket);
      socket.onopen = () => {
        socket.send(token);
        socket.send(encode(request, { ignoreUndefined: true }));
      };
      socket.onerror = reject;
      let first = true;
      socket.onmessage = ({ data }) => {
        if (first) {
          resolve({ stateId: data as string, client });
          first = false;
          return;
        }
        this.handleStateChange(data as ArrayBuffer, client, onStateChange);
      };
    });
  }

  public static connectExisting(
    host: string,
    token: string,
    stateId: StateId,
    onStateChange: (state: UserState) => void
  ): Promise<RtagClient> {
    return new Promise((resolve, reject) => {
      const socket = new WebSocket(`ws://${host}`);
      socket.binaryType = "arraybuffer";
      const client = new RtagClient(socket);
      socket.onopen = () => {
        socket.send(token);
        socket.send(stateId);
        resolve(client);
      };
      socket.onerror = reject;
      socket.onmessage = ({ data }) => {
        this.handleStateChange(data as ArrayBuffer, client, onStateChange);
      };
    });
  }

  {{#each methods}}
  {{#if (ne @key ../initialize)}}
  public {{@key}}(request: {{makeRequestName @key}}): Promise<{{../error.typeString}} | undefined> {
    const msgId = Math.random().toString(36).substring(2);
    this.socket.send(encode({ method: "{{@key}}", msgId, args: request }, { ignoreUndefined: true }));
    return new Promise((resolve) => {
      this.callbacks[msgId] = resolve;
    });
  }

  {{/if}}
  {{/each}}
  public disconnect(): void {
    this.socket.close();
  }

  private static handleStateChange(data: ArrayBuffer, client: RtagClient, onStateChange: (state: UserState) => void) {
    const { state, responses } = decode(data) as { state: UserState; responses: Record<string, {{error.typeString}} | null> };
    onStateChange(state);
    Object.entries(responses).forEach(([msgId, response]) => {
      if (msgId in client.callbacks) {
        client.callbacks[msgId](response ?? undefined);
        delete client.callbacks[msgId];
      }
    });
  }
}
