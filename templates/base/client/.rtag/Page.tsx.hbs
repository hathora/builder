/* This example requires Tailwind CSS v2.0+ */
import React, { Fragment, useContext } from 'react'
import { useNavigate } from "react-router-dom";
import { Disclosure, Menu, Transition } from '@headlessui/react'
import { BellIcon, MenuIcon, XIcon } from '@heroicons/react/outline'
import {
AtSymbolIcon,
CalendarIcon,
CheckIcon,
ChevronDownIcon,
CurrencyDollarIcon,
LightningBoltIcon,
LinkIcon,
LocationMarkerIcon,
PencilIcon,
UserCircleIcon,
UserGroupIcon,
} from '@heroicons/react/solid'

import { {{userState}} as UserState } from "./types";
import { RtagContext } from "./context";

const userDefault = {
name: 'Tom Cook',
email: 'tom@example.com',
imageUrl:
'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80',
}
const navigation = [
{ name: 'Prototype UI', href: '#', current: true },
]
const userNavigation = [
{ name: 'Coming Soon!', href: '#' },
]

function classNames(...classes) {
return classes.filter(Boolean).join(' ')
}

type PageProps = {
  openMethods: boolean;
  setOpenMethods: (v: boolean) => void;
  children: React.ReactNode;
  state: UserState | undefined;
  user: any;
};
export function Page({openMethods, setOpenMethods, children, state, user}: PageProps) {
const navigate = useNavigate();

return (
<>
<div className="min-h-full">
  <Disclosure as="nav" className="bg-indigo-500">
    {({ open }) => (
    <>
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div className="flex items-center justify-between h-16">
        <div className="flex items-center">
          <div className="flex-shrink-0 cursor-pointer" onClick={() => navigate(`/`)}>
            <img className="h-10 w-10" src="https://i.ibb.co/sQMmTTq/hathora-hammer-logo-light.png" alt="hathora-hammer-logo" border="0" />
          </div>
          <div className="flex-shrink-0 flex items-center cursor-pointer" onClick={() => navigate(`/`)}>
            <span className="font-display font-semibold text-2xl text-white mt-1 ml-3 uppercase">{{appName}}</span>
          </div>
          {user && <div className="hidden md:block">
            <div className="ml-10 flex items-baseline space-x-4">
              <span
                      key={user.name}
                      className="bg-indigo-700 text-gray-200 px-3 py-2 rounded-md text-sm font-medium"
              >
                <UserCircleIcon className="inline flex-shrink-0 mr-1.5 h-5 w-5 text-gray-200" aria-hidden="true" />
                {user.name}
              </span>
            </div>
          </div>}
        </div>
      </div>
    </div>

    <Disclosure.Panel className="md:hidden">
      <div className="px-2 pt-2 pb-3 space-y-1 sm:px-3">
        {navigation.map((item) => (
        <Disclosure.Button
                key={item.name}
                as="a"
                href={item.href}
                className={classNames(
                item.current ? 'bg-gray-900 text-white' : 'text-gray-300 hover:bg-gray-700 hover:text-white',
        'block px-3 py-2 rounded-md text-base font-medium'
        )}
        aria-current={item.current ? 'page' : undefined}
        >
        {item.name}
        </Disclosure.Button>
        ))}
      </div>
      <div className="pt-4 pb-3 border-t border-gray-700">
        <div className="flex items-center px-5">
          <div className="flex-shrink-0">
            <img className="h-10 w-10 rounded-full" src={userDefault.imageUrl} alt="" />
          </div>
          <div className="ml-3">
            <div className="text-base font-medium leading-none text-white">{userDefault.name}</div>
            <div className="text-sm font-medium leading-none text-gray-400">{userDefault.email}</div>
          </div>
        </div>
        <div className="mt-3 px-2 space-y-1">
          {userNavigation.map((item) => (
          <Disclosure.Button
                  key={item.name}
                  as="a"
                  href={item.href}
                  className="block px-3 py-2 rounded-md text-base font-medium text-gray-400 hover:text-white hover:bg-gray-700"
          >
            {item.name}
          </Disclosure.Button>
          ))}
        </div>
      </div>
    </Disclosure.Panel>
  </>
  )}
  </Disclosure>
  {state && user && <div className="fixed top-3.5 right-3.5 lg:right-56">
    <span className="sm:ml-3">
      <button
              type="button"
              onClick={() => setOpenMethods(true)}
              className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
      >
        <LightningBoltIcon className="-ml-1 mr-2 h-5 w-5" aria-hidden="true" />
        Methods
      </button>
    </span>
  </div>}
  <main>
    <div className="py-6 sm:px-6 lg:px-8">
      {children}
    </div>
  </main>
</div>
</>
)
}
