import React, { useRef, useLayoutEffect, useContext, useState } from "react";
import { ArrowSmDownIcon, MinusSmIcon, PlusSmIcon } from '@heroicons/react/solid'
import { RtagContext } from "./context";
import { RtagConnection } from "./client";
import {
  {{userState}} as UserState,
  {{#each types}}
  {{@key}},
  {{/each}}
} from "./types";
{{#each plugins}}
import {{this}}Plugin from "../plugins/{{this}}";
{{/each}}
{{#each plugins}}

window.customElements.define("{{makePluginName this}}", {{this}}Plugin);
{{/each}}

function KVDisplay(props: { label: string; children: JSX.Element }) {
  return (
    <div className="kv-display">
      <span className="font-bold">{props.label}: </span>
      {props.children}
    </div>
  );
}

function ArrayDisplay<T>(props: { value: T[]; children: (value: T) => JSX.Element, childType: string }) {
  const [isCollapsed, setIsCollapsed] = useState<boolean>(props.value && props.value.length > 7 ? true : false);

  let icon;
  if (isCollapsed) {
    icon = <PlusSmIcon className="h-3 w-3 fill-current" aria-hidden="true" />
  } else {
    icon = <MinusSmIcon className="h-3 w-3 fill-current" aria-hidden="true" />
  }
  return (
    <span className={`array-display`}>
      {props.value && props.value.length > 0 &&
        <span className="align-middle mr-0.5">
          <button
                  type="button"
                  onClick={() => setIsCollapsed(!isCollapsed)}
            className="inline-flex items-center border border-gray-700 rounded-md shadow-sm
              text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 hover:text-gray-900 hover:border-gray-900
              focus:outline-none focus:ring-1 focus:ring-offset-1 focus:ring-indigo-500 disabled:opacity-50"
          >
            {icon}
          </button>
        </span>}
      [
        {props.value && props.value.length > 0 &&
          <>
          <span className="text-gray-500 text-sm italic">{props.value.length} {props.value.length === 1 ? 'item' : 'items'}</span>
          {!isCollapsed &&
            <div className={`flex ${typeof props.value[0] === 'object' ? 'flex-row overflow-x-auto' : 'flex-col' }`}>
              {props.value.map((val, i) => (
                <div className={`array-item`}
                    key={i}>
                  {props.children(val)}
                </div>
              ))}
            </div>}
          {isCollapsed && '...'}
          </>}
      ]
    </span>
  );
}

function OptionalDisplay<T>(props: { value: T | undefined; children: (value: T) => JSX.Element }) {
  return <span className="optional-display">{props.value !== undefined ? props.children(props.value) : ""}</span>;
}

function EnumDisplay(props: { value: number; enum: object }) {
  const labels = Object.entries(props.enum)
    .filter(([_, value]) => typeof value === "number")
    .map(([label, _]) => label);
  return <span className="enum-display">{labels[props.value]}</span>;
}

function StringDisplay({ value }: { value: string }) {
  return <span className="string-display">"{value}"</span>;
}

function IntDisplay({ value }: { value: number }) {
  return <span className="int-display">{value}</span>;
}

function FloatDisplay({ value }: { value: number }) {
  return <span className="float-display">{value}</span>;
}

function BooleanDisplay({ value }: { value: boolean }) {
  return <span className="boolean-display">{value ? "true" : "false"}</span>;
}

function PluginDisplay<T>({ value, component, parentIsArray }: { value: T; component: string, parentIsArray: boolean }) {
  const { state, connection } = useContext(RtagContext)!;
  const ref = useRef<{ val: T; state: UserState; client: RtagConnection }>();
  useLayoutEffect(() => {
    ref.current!.val = value;
    ref.current!.state = state;
    ref.current!.client = connection;
  });
  const [isCollapsed, setIsCollapsed] = useState<boolean>(false);
  let icon;
  if (isCollapsed) {
    icon = <PlusSmIcon className="h-3 w-3 fill-current" aria-hidden="true" />
  } else {
    icon = <MinusSmIcon className="h-3 w-3 fill-current" aria-hidden="true" />
  }
  return (<>
    {!parentIsArray && <span className="align-middle mr-0.5">
      <button
              type="button"
              onClick={() => setIsCollapsed(!isCollapsed)}
        className="inline-flex items-center border border-gray-700 rounded-md shadow-sm
          text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 hover:text-gray-900 hover:border-gray-900
          focus:outline-none focus:ring-1 focus:ring-offset-1 focus:ring-indigo-500 disabled:opacity-50"
      >
        {icon}
      </button>
    </span>}
    {!isCollapsed ?
    <div className="plugin-display p-1">{React.createElement(component, { ref })}</div> :
    <span ref={ref} className="text-gray-500 text-sm italic"> plugin collapsed</span>}
  </>);
}

{{#each types}}
{{#if (eq type "object")}}
function {{@key}}Display({ value, parentIsArray }: { value: {{@key}}, parentIsArray: boolean  }) {
  const [isCollapsed, setIsCollapsed] = useState<boolean>(false);
  let icon;
  if (isCollapsed) {
    icon = <PlusSmIcon className="h-3 w-3 fill-current" aria-hidden="true" />
  } else {
    icon = <MinusSmIcon className="h-3 w-3 fill-current" aria-hidden="true" />
  }
  return (<>
    {!parentIsArray && <span className="align-middle mr-0.5">
      <button
              type="button"
              onClick={() => setIsCollapsed(!isCollapsed)}
        className="inline-flex items-center border border-gray-700 rounded-md shadow-sm
          text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 hover:text-gray-900 hover:border-gray-900
          focus:outline-none focus:ring-1 focus:ring-offset-1 focus:ring-indigo-500 disabled:opacity-50"
      >
        {icon}
      </button>
    </span>}
    {!isCollapsed ?
    <div className="object-display bg-white m-1 p-1 border rounded">
      {{#each properties}}
      <KVDisplay label="{{@key}}">
        {{> renderDisplay arg=@key}}
      </KVDisplay>
      {{/each}}
    </div> :
    <span className="text-gray-500 text-sm italic"> object collapsed</span>}
  </>
  );
}

{{else if (eq type "union")}}
function {{@key}}Display({ value }: { value: {{@key}} }) {
  switch (value.type) {
    {{#each options}}
    case "{{@key}}":
      return {{> renderDisplay arg="val"}};
    {{/each}}
  }
}

{{/if}}
{{/each}}
export function State() {
  const { state: value } = useContext(RtagContext)!;
  return (
    <div className="state-display font-mono text-gray-700 w-full">
      {{> renderDisplay (lookup types userState) parentIsArray=true}}
    </div>
  );
}
{{#*inline "renderDisplay"}}
{{#if (eq type "plugin")}}
<PluginDisplay {{#if arg}}value={ value.{{arg}} }{{else}}value={value}{{/if}} component="{{makePluginName typeString}}" parentIsArray="{{parentIsArray}}" />
{{else if (eq type "object")}}
<{{typeString}}Display {{#if arg}}value={ value.{{arg}} }{{else}}value={value}{{/if}} parentIsArray="{{parentIsArray}}" />
{{else if (eq type "union")}}
<{{typeString}}Display {{#if arg}}value={ value.{{arg}} }{{else}}value={value}{{/if}} />
{{else if (eq type "array")}}
<ArrayDisplay<{{> renderTypeArg items}}> {{#if arg}}value={ value.{{arg}} }{{else}}value={value}{{/if}}>
  {(value) => 
    {{> renderDisplay items parentIsArray=true}}
  }
</ArrayDisplay>
{{else if (eq type "optional")}}
<OptionalDisplay<{{> renderTypeArg}}> {{#if arg}}value={ value.{{arg}} }{{else}}value={value}{{/if}}>
  {(value) => 
    {{> renderDisplay item}}
  }
</OptionalDisplay>
{{else if (eq type "enum")}}
<EnumDisplay {{#if arg}}value={ value.{{arg}} }{{else}}value={value}{{/if}} enum={ {{typeString}} } />
{{else if (eq type "string")}}
<StringDisplay {{#if arg}}value={ value.{{arg}} }{{else}}value={value}{{/if}} />
{{else if (eq type "int")}}
<IntDisplay {{#if arg}}value={ value.{{arg}} }{{else}}value={value}{{/if}} />
{{else if (eq type "float")}}
<FloatDisplay {{#if arg}}value={ value.{{arg}} }{{else}}value={value}{{/if}} />
{{else if (eq type "boolean")}}
<BooleanDisplay {{#if arg}}value={ value.{{arg}} }{{else}}value={value}{{/if}} />
{{/if}}
{{/inline}}
{{#*inline "renderTypeArg"}}
{{#if alias}}
{{typeString}}
{{~else if (eq type "optional")}}
{{> renderTypeArg item}}
{{~else if (eq type "array")}}
{{> renderTypeArg items}}[]
{{~else if (eq type "int")}}
number
{{~else if (eq type "float")}}
number
{{~else if (eq type "string")}}
string
{{~else if (eq type "boolean")}}
boolean
{{~else if (eq type "plugin")}}
{{> renderTypeArg item}}
{{~else}}
{{makeRequestName @key}}
{{~/if}}
{{/inline}}
