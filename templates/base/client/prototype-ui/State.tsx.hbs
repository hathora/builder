import React, { useRef, useLayoutEffect, useContext, useState, useEffect } from "react";
import { toast } from "react-toastify";
import { ChevronRightIcon, ChevronDownIcon, MinusSmIcon, PlusSmIcon, UserCircleIcon } from "@heroicons/react/solid";
import { getUserDisplayName, UserData } from "../../api/base";
import * as T from "../../api/types";
import { HathoraConnection } from "../.hathora/client";
{{#each plugins}}
import {{this}}Plugin from "./plugins/{{this}}/index";
{{/each}}
import { HathoraContext } from "./context";
{{#each plugins}}

window.customElements.define("{{makePluginName this}}", {{this}}Plugin);
{{/each}}

function KVDisplay(props: { label: string; typeString: string; children: JSX.Element }) {
  const [isCollapsed, setIsCollapsed] = useState<boolean>(false);
  let icon;
  if (isCollapsed) {
    icon = <ChevronRightIcon className="w-3 h-3 fill-current" aria-hidden="true" />;
  } else {
    icon = <ChevronDownIcon className="w-3 h-3 fill-current" aria-hidden="true" />;
  }
  return (
    <div className="p-1 m-1 kv-display">
      <span className="mr-1 align-middle">
        <button type="button" onClick={() => setIsCollapsed(!isCollapsed)}>
          {icon}
        </button>
      </span>
      <span className="group">
        <span className="hidden text-sm italic text-neutralgray-300 group-hover:inline">({props.typeString}) </span>
        <span className="font-medium">{props.label}: </span>
      </span>
      {isCollapsed ? "..." : props.children}
    </div>
  );
}

function ArrayDisplay<T>(props: { value: T[]; children: (value: T) => JSX.Element }) {
  return (
    <span className={`array-display`}>
      [
      {props.value.length > 0 && (
        <>
          <span className="ml-2 text-sm italic text-neutralgray-300">
            {props.value.length} {props.value.length === 1 ? "item" : "items"}
          </span>
          <div
            className={`flex ${
              typeof props.value[0] === "object"
                ? "flex-row overflow-x-auto"
                : "flex-col array-max-height overflow-y-auto"
            }`}
          >
            {props.value.map((val, i) => (
              <div key={i} className="m-0.5">{props.children(val)}</div>
            ))}
          </div>
        </>
      )}
      ]
    </span>
  );
}

function OptionalDisplay<T>(props: { value: T | undefined; children: (value: T) => JSX.Element }) {
  if (props.value === undefined) {
    return <span className="text-sm italic text-neutralgray-300">none</span>;
  }
  return <span className="optional-display">{props.children(props.value)}</span>;
}

function EnumDisplay(props: { value: number; enum: object }) {
  const labels = Object.entries(props.enum)
    .filter(([_, value]) => typeof value === "number")
    .map(([label, _]) => label);
  return <span className="enum-display">{labels[props.value]}</span>;
}

function UserIdDisplay({ value }: { value: string }) {
  return (
    <div className="max-w-md p-1 m-1 border rounded">
      <span className="flex items-center user-display">
        <UserCircleIcon className="inline flex-shrink-0 mr-1.5 h-5 w-5 text-neutralgray-300" aria-hidden="true" />
        {value}
      </span>
    </div>
  );
}

function StringDisplay({ value }: { value: string }) {
  return <span className="string-display">"{value}"</span>;
}

function IntDisplay({ value }: { value: number }) {
  return <span className="int-display">{value}</span>;
}

function FloatDisplay({ value }: { value: number }) {
  return <span className="float-display">{value}</span>;
}

function BooleanDisplay({ value }: { value: boolean }) {
  return <span className="boolean-display">{value ? "true" : "false"}</span>;
}

function PluginDisplay<T>(props: { value: T; component: string; children: (value: T) => JSX.Element }) {
  const { connection, user, state, updatedAt, pluginsAsObjects } = useContext(HathoraContext)!;
  const ref = useRef<{ val: T; client: HathoraConnection; user: UserData; state: T.{{userState}}; updatedAt: number }>();
  const displayError = (e: CustomEvent) => toast.error(e.detail);
  useLayoutEffect(() => {
    if (ref.current) {
      ref.current.val = props.value;
      ref.current.client = connection;
      ref.current.user = user;
      ref.current.state = state;
      ref.current.updatedAt = updatedAt;
      (ref.current as any).addEventListener("error", displayError);
      return () => {
        if (ref.current) {
          (ref.current as any).removeEventListener("error", displayError);
        }
      };
    }
  });
  if (pluginsAsObjects) {
    return props.children(props.value);
  } else {
    return <div className="p-1 plugin-display">{React.createElement(props.component, { ref })}</div>;
  }
}

{{#each types}}
{{> renderComponent}}
{{/each}}
export function State() {
  const { state: value } = useContext(HathoraContext)!;
  return (
    <div className="w-full font-mono text-neutralgray-200 bg-neutralgray-650 rounded-2xl shadow state-display">
      {{> renderDisplay (lookup types userState)}}
    </div>
  );
}
{{#*inline "renderComponent"}}
{{#if (eq type "plugin")}}
{{> renderComponent item}}
{{else if (eq type "object")}}
function {{@key}}Display({ value }: { value: T.{{@key}}  }) {
  return (
    <div className="border border-neutralgray-525 rounded-2xl object-display">
      {{#each properties}}
      <KVDisplay label="{{@key}}" typeString="{{typeString}}">
        {{> renderDisplay arg=@key}}
      </KVDisplay>
      {{/each}}
    </div>
  );
}

{{else if (eq type "union")}}
function {{@key}}Display({ value }: { value: {{@key}} }) {
  switch (value.type) {
    {{#each options}}
    case "{{@key}}":
      return {{> renderDisplay arg="val"}};
    {{/each}}
  }
}

{{/if}}
{{/inline}}
{{#*inline "renderDisplay"}}
{{#if (eq type "plugin")}}
<PluginDisplay {{#if arg}}value={ value.{{arg}} }{{else}}value={value}{{/if}} component="{{makePluginName typeString}}">
  {(value) =>
    {{> renderDisplay item}}
  }
</PluginDisplay>
{{else if (eq type "object")}}
<{{typeString}}Display {{#if arg}}value={ value.{{arg}} }{{else}}value={value}{{/if}}/>
{{else if (eq type "union")}}
<{{typeString}}Display {{#if arg}}value={ value.{{arg}} }{{else}}value={value}{{/if}}/>
{{else if (eq type "array")}}
<ArrayDisplay<{{> renderTypeArg items}}> {{#if arg}}value={ value.{{arg}} }{{else}}value={value}{{/if}}>
  {(value) =>
    {{> renderDisplay items}}
  }
</ArrayDisplay>
{{else if (eq type "optional")}}
<OptionalDisplay<{{> renderTypeArg}}> {{#if arg}}value={ value.{{arg}} }{{else}}value={value}{{/if}}>
  {(value) =>
    {{> renderDisplay item}}
  }
</OptionalDisplay>
{{else if (eq type "enum")}}
<EnumDisplay {{#if arg}}value={ value.{{arg}} }{{else}}value={value}{{/if}} enum={ T.{{typeString}} } />
{{else if (eq typeString "UserId")}}
<UserIdDisplay {{#if arg}}value={ value.{{arg}} }{{else}}value={value}{{/if}} />
{{else if (eq type "string")}}
<StringDisplay {{#if arg}}value={ value.{{arg}} }{{else}}value={value}{{/if}} />
{{else if (eq type "int")}}
<IntDisplay {{#if arg}}value={ value.{{arg}} }{{else}}value={value}{{/if}} />
{{else if (eq type "float")}}
<FloatDisplay {{#if arg}}value={ value.{{arg}} }{{else}}value={value}{{/if}} />
{{else if (eq type "boolean")}}
<BooleanDisplay {{#if arg}}value={ value.{{arg}} }{{else}}value={value}{{/if}} />
{{/if}}
{{/inline}}
{{#*inline "renderTypeArg"}}
{{#if alias}}
T.{{typeString}}
{{~else if (eq type "optional")}}
{{> renderTypeArg item}}
{{~else if (eq type "array")}}
{{> renderTypeArg items}}[]
{{~else if (eq type "int")}}
number
{{~else if (eq type "float")}}
number
{{~else if (eq type "string")}}
string
{{~else if (eq type "boolean")}}
boolean
{{~else if (eq type "plugin")}}
{{> renderTypeArg item}}
{{~else}}
{{makeRequestName @key}}
{{~/if}}
{{/inline}}
