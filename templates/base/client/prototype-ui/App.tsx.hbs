import React, { useEffect, useState } from "react";
import ReactDOM from "react-dom";
import { BrowserRouter, Route, Routes, useLocation, useNavigate, useParams } from "react-router-dom";
import { ToastContainer, Zoom, toast } from "react-toastify";
import { EyeIcon, EyeOffIcon, LightningBoltIcon, UserCircleIcon } from "@heroicons/react/solid";
import { XCircleIcon } from "@heroicons/react/outline";
import { getUserDisplayName, UserData } from "../../api/base";
import { HathoraClient, HathoraConnection, UpdateArgs } from "../.hathora/client";
import { ConnectionFailure } from "../.hathora/failures";
import { HathoraContext } from "./context";
import { Forms, InitializeForm } from "./Forms";
import { State } from "./State";
import { Login } from "./Login";

const client = new HathoraClient();

function App() {
  const [token, setToken] = useState<string | undefined>(sessionStorage.getItem(client.appId) ?? undefined);
  const [connection, setConnection] = useState<HathoraConnection>();
  const [updateArgs, setUpdateArgs] = useState<UpdateArgs>();
  const [connectionError, setConnectionError] = useState<ConnectionFailure>();
  const location = useLocation();
  const navigate = useNavigate();

  useEffect(() => {
    if (location.hash.length > 0) {
      sessionStorage.setItem(client.appId, location.hash.substring(1));
      setToken(location.hash.substring(1));
      navigate(location.pathname, { replace: true });
    }
  }, [location]);

  const user = token !== undefined ? HathoraClient.getUserFromToken(token) : undefined;
  return (
    <>
      <NavBar user={user} />
      <div id="app" className="py-6 sm:px-6 lg:px-8">
        {token === undefined || user === undefined ? (
          <Login client={client} setToken={setToken} />
        ) : (
          <Routes>
            <Route
              path="/state/:stateId"
              element={
                <Main
                  user={user}
                  connection={connection}
                  updateArgs={updateArgs}
                  connectionError={connectionError}
                  onConnect={async (stateId) => {
                    const connection = await client.connect(
                      token,
                      stateId,
                      setUpdateArgs,
                      setConnectionError
                    );
                    setConnection(connection);
                  }}
                  onDisconnect={() => {
                    if (connection) {
                      connection.disconnect();
                      setConnection(undefined);
                      setUpdateArgs(undefined);
                      setConnectionError(undefined);
                    }
                  }}
                />
              }
            />
            <Route path="/" element={<Home token={token} connect={(stateId) => navigate(`/state/${stateId}`)} />} />
            <Route path="*" element={<div>Not Found</div>} />
          </Routes>
        )}
      </div>
    </>
  );
}

function NavBar({ user }: { user?: UserData }) {
  const navigate = useNavigate();
  return (
    <div className="bg-neutralgray-700 border-b border-neutralgray-525 shadow">
      <div className="flex items-center justify-between h-16 px-4 mx-auto max-w-7xl sm:px-6 lg:px-8">
        <div className="flex items-center">
          <div className="flex-shrink-0 cursor-pointer" onClick={() => navigate(`/`)}>
            <img className="w-10 h-10" src="/logo.png" alt="hathora-hammer-logo" />
          </div>
          <div className="flex items-center flex-shrink-0 cursor-pointer" onClick={() => navigate(`/`)}>
            <span className="mt-1 ml-3 text-2xl font-semibold text-neutralgray-200 uppercase font-display">{{appName}}</span>
          </div>
          {user && (
            <div className="block">
              <div className="flex items-baseline ml-10 space-x-4">
                <span className="px-3 py-2 text-xs font-medium text-neutralgray-300 bg-neutralgray-650 rounded-md md:text-sm">
                  <UserCircleIcon className="inline flex-shrink-0 mr-1.5 h-5 w-5 text-neutralgray-300" aria-hidden="true" />
                  {getUserDisplayName(user)}
                </span>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

function Home({ token, connect }: { token: string; connect: (stateId: string) => void }) {
  const navigate = useNavigate();
  const [stateId, setStateId] = useState<string>("");

  return (
    <div className="flex flex-col w-full md:justify-center">
      <div className="w-6/12 m-auto">
        <h2 className="text-2xl font-semibold text-neutralgray-200">Home</h2>
        {isFinding ? (
          <div className="flex flex-row text-xl pt-8 align-middle">
            <svg
              role="status"
              className="w-8 h-8 mr-2 text-neutralgray-200 animate-spin dark:text-neutralgray-300 fill-brand-500"
              viewBox="0 0 100 101"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
                fill="currentColor"
              />
              <path
                d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
                fill="currentFill"
              />
            </svg>
            <span className="text-l">
              Matching players... ({playersFound}/{numPlayers} found)
            </span>
            <span className="text-secondary-500">
              <XCircleIcon className="w-7 h-7 ml-2 cursor-pointer" onClick={() => location.reload()} />
            </span>
          </div>
        ) : (
          <div className="flex flex-col mt-2">
            <div className="mb-4">
              <InitializeForm>
                {(value) => (
                  <button
                    type="button"
                    onClick={async () => {
                      const stateId = await client.createPrivateLobby(token)
                      connect(stateId);
                    }}
                    className="inline-flex items-center rounded-full border px-6 py-2 text-base font-medium shadow-sm transition duration-300 ease-out focus:outline-none focus:ring-2 focus:ring-brand-500 border-transparent bg-brand-500 text-neutralgray-700 hover:bg-secondary-500 text-neutralgray-700 border border-neutralgray-700"
                  >
                    Create New
                  </button>
                )}
              </InitializeForm>
            </div>
            <hr className="mt-2" />
            <div className="mt-6">
              <input
                type="text"
                value={stateId}
                placeholder="Room code"
                onChange={(e) => setStateId(e.target.value)}
                className="min-w-0 mt-1 appearance-none rounded-md py-2 px-4 text-base placeholder-neutralgray-300 focus:border-secondary-500 focus:placeholder-neutralgray-400 focus:outline-none sm:max-w-xs border border-neutralgray-300 bg-neutralgray-650 text-neutralgray-200"
              />
              <button
                type="button"
                onClick={() => navigate(`/state/${stateId}`)}
                className="ml-0 mt-2 sm:ml-4 sm:mt-0 inline-flex items-center rounded-full border px-6 py-2 text-base font-medium shadow-sm transition duration-300 ease-out focus:outline-none focus:ring-2 focus:ring-brand-500 border-transparent bg-brand-500 text-neutralgray-700 hover:bg-secondary-500 text-neutralgray-700 border border-neutralgray-700"
              >
                Join Existing
              </button>
            </div>{" "}
          </div>
        )}
      </div>
    </div>
  );
}

type MainProps = {
  user: UserData;
  connection: HathoraConnection | undefined;
  updateArgs: UpdateArgs | undefined;
  connectionError: ConnectionFailure | undefined;
  onConnect: (stateId: string) => void;
  onDisconnect: () => void;
};
function Main({ user, connection, connectionError, updateArgs, onConnect, onDisconnect }: MainProps) {
  const { stateId } = useParams();
  const [openMethods, setOpenMethods] = useState(false);
  const [pluginsAsObjects, setPluginsAsObjects] = useState(false);
  useEffect(() => {
    if (connection === undefined) {
      onConnect(stateId!);
    }
    return onDisconnect;
  }, [connection]);

  if (connectionError !== undefined) {
    return <div>Connection error: {connectionError.message}</div>;
  }

  if (connection === undefined || updateArgs === undefined) {
    return <div>Loading...</div>;
  }

  updateArgs.events.forEach((event) => toast.info(event));

  return (
    <HathoraContext.Provider value=\{{ user, connection, ...updateArgs, pluginsAsObjects }}>
      <div className="fixed top-24 right-6 lg:right-10">
        <span className="sm:ml-3">
          <button
            type="button"
            onClick={() => setOpenMethods(true)}
            className="inline-flex items-center rounded-full border px-6 py-2 text-base font-medium shadow-sm transition duration-300 ease-out focus:outline-none focus:ring-2 focus:ring-brand-500 border-transparent bg-brand-500 text-neutralgray-700 hover:bg-secondary-500 text-neutralgray-700 border border-neutralgray-700"
          >
            <LightningBoltIcon className="w-5 h-5 mr-2 -ml-1" aria-hidden="true" />
            Methods
          </button>
        </span>
      </div>
      {{#if plugins}}
      <div className="absolute top-4 right-4 lg:right-10">
        <span className="sm:ml-3">
          <button
            type="button"
            onClick={() => setPluginsAsObjects(!pluginsAsObjects)}
            className="inline-flex items-center px-4 py-2 text-xs font-medium text-secondary-500"
          >
            {pluginsAsObjects ? <EyeOffIcon className="w-4 h-4 mr-0.5 -ml-0.5" aria-hidden="true" /> :
              <EyeIcon className="w-4 h-4 mr-0.5 -ml-0.5" aria-hidden="true" />}
            Toggle Plugin View
          </button>
        </span>
      </div>
      {{/if}}
      <State />
      <Forms open={openMethods} setOpen={setOpenMethods} />
    </HathoraContext.Provider>
  );
}

ReactDOM.render(
  <BrowserRouter>
    <App />
    <ToastContainer position="top-center" autoClose={2000} transition={Zoom} hideProgressBar />
  </BrowserRouter>,
  document.getElementById("root")
);
