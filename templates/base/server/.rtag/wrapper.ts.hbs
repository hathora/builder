{{#unless (env "PROD_BUILD")}}
import module from "module";
import dependencyTree from "dependency-tree";
import chokidar from "chokidar";
{{/unless}}
import { decode } from "msgpackr";
import { Context } from "./methods";
import { UserData, Response, Method } from "./base";
import {
  {{#each methods}}
  {{makeRequestName @key}},
  {{/each}}
} from "./types";

let impl = new (await import("../impl")).Impl();
{{#unless (env "PROD_BUILD")}}
const deps = dependencyTree.toList({
  directory: ".",
  filename: module.createRequire(import.meta.url).resolve("../impl"),
  filter: (path) => !path.includes(".rtag") && !path.includes("node_modules"),
});
chokidar.watch(deps).on("change", async () => {
  try {
    impl = new (await import(`../impl.ts#${Math.random()}`)).Impl();
  } catch (e) {
    console.error("Failed to reload:", e);
  }
});
{{/unless}}
let changed = false;

type State = ReturnType<typeof impl.{{initialize}}>;

const PROXY_TARGET = Symbol("proxy-target");
const handler: ProxyHandler<any> = {
  get(target: any, property: string | symbol) {
    if (property === PROXY_TARGET) {
      return target;
    }
    const res = Reflect.get(target, property);
    if (typeof res === "object" || typeof res === "function") {
      return new Proxy(res, handler);
    } else {
      return res;
    }
  },
  set(target: any, property: string | symbol, value: any) {
    const prevValue = (target[PROXY_TARGET] ?? target)[property];
    if (!Object.is(prevValue, value)) {
      changed = true;
    }
    return Reflect.set(target, property, value);
  },
  apply(target: Function, thisArg: any, args: any) {
    if (
      Array.isArray(thisArg) &&
      ["push", "pop", "shift", "unshift", "copyWithin", "reverse", "sort", "splice", "flat", "fill"].includes(
        target.name
      )
    ) {
      changed = true;
    } else if (thisArg instanceof Set && ["add", "delete", "clear"].includes(target.name)) {
      changed = true;
    } else if (thisArg instanceof Map && ["set", "delete", "clear"].includes(target.name)) {
      changed = true;
    }
    return Reflect.apply(target, thisArg[PROXY_TARGET], args);
  },
};

export const ImplWrapper = {
  initialize(user: UserData, ctx: Context, argsBuffer: Buffer): State {
    const state = impl.createGame(user, ctx, decode(argsBuffer) as {{makeRequestName initialize}});
    return new Proxy(state, handler);
  },
  getResult(state: State, user: UserData, method: Method, ctx: Context, argsBuffer: Buffer): Response | undefined {
    switch (method) {
      {{#each methods}}
      {{#if (ne @key ../initialize)}}
      case Method.{{uppercase @key}}:
        return impl.{{@key}}(state, user, ctx, decode(argsBuffer) as {{makeRequestName @key}});
      {{/if}}
      {{/each}}
      default:
        return undefined;
    }
  },
  {{#if tick}}
  onTick(state: State, ctx: Context, timeDelta: number): void {
    impl.onTick(state, ctx, timeDelta);
  },
  {{/if}}
  getUserState(state: State, user: UserData) {
    return impl.getUserState((state as any)[PROXY_TARGET], user);
  },
  changed(): boolean {
    const res = changed;
    changed = false;
    return res;
  },
};
