import {
  NO_DIFF,
  DeepPartial,
  {{#each types}}
  {{@key}},
  {{/each}}
} from "./types";

{{#each types}}
{{> renderDiffFunction}}
{{/each}}
export function computeDiff(state: {{userState}}, prevState: {{userState}}): DeepPartial<{{userState}}> | typeof NO_DIFF {
  return diff{{userState}}(state, prevState);
}

function diffPrimitive<T>(a: T, b: T) {
  return a === b ? NO_DIFF : a;
}

function diffOptional<T>(
  a: T | undefined,
  b: T | undefined,
  innerDiff: (x: T, y: T) => DeepPartial<T> | typeof NO_DIFF
) {
  if (a !== undefined && b !== undefined) {
    return innerDiff(a, b);
  } else if (a !== undefined || b !== undefined) {
    return b;
  }
  return NO_DIFF;
}

function diffArray<T>(a: T[], b: T[], innerDiff: (x: T, y: T) => DeepPartial<T> | typeof NO_DIFF) {
  const arr = a.map((val, i) => (i < b.length ? innerDiff(val, b[i]) : val));
  return a.length === b.length && arr.every((v) => v === NO_DIFF) ? NO_DIFF : arr;
}

function diffObj<T>(obj: T) {
  return Object.values(obj).every((v) => v === NO_DIFF) ? NO_DIFF : obj;
}
{{#*inline "renderDiffFunction"}}
{{#if (eq type "plugin")}}
{{> renderDiffFunction item}}
{{else if (eq type "object")}}
function diff{{@key}}(obj: {{@key}}, prevObj: {{@key}}): DeepPartial<{{@key}}> | typeof NO_DIFF {
  return diffObj({
    {{#each properties}}
    {{@key}}: {{> renderDiff a=(concat "obj." @key) b=(concat "prevObj." @key)}},
    {{/each}}
  });
}

{{else if (eq type "union")}}
function diff{{@key}}(obj: {{@key}}, prevObj: {{@key}}): DeepPartial<{{@key}}> {
  {{#each options}}
  {{#unless @first}}else {{/unless}}if (obj.type === "{{@key}}" && prevObj.type === "{{@key}}") {
    return { type: "{{@key}}", val: {{> renderDiff a="obj.val" b="prevObj.val"}} };
  }
  {{/each}}
  return obj;
}

{{/if}}
{{/inline}}
{{#*inline "renderDiff"}}
{{#if (eq type "plugin")}}
{{> renderDiff item a=a b=b}}
{{~else if (eq type "object")}}
diff{{typeString}}({{a}}, {{b}})
{{~else if (eq type "union")}}
diff{{typeString}}({{a}}, {{b}})
{{~else if (eq type "array")}}
diffArray({{a}}, {{b}}, (a, b) => {{> renderDiff items a="a" b="b"}})
{{~else if (eq type "optional")}}
diffOptional({{a}}, {{b}}, (a, b) => {{> renderDiff item a="a" b="b"}})
{{~else}}
diffPrimitive({{a}}, {{b}})
{{~/if}}
{{/inline}}