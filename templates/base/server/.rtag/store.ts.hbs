import module from "module";
import { dirname, join } from "path";
import { fileURLToPath } from "url";
import { existsSync, mkdirSync } from "fs";
import dependencyTree from "dependency-tree";
import chokidar from "chokidar";
import { randomBytes } from "crypto";
import seedrandom from "seedrandom";
import { decode, encode } from "@msgpack/msgpack";
import { register } from "./protocol";
import LogStore from "./logstore";
import { Context } from "./methods";
import { UserData, {{makeRequestName initialize}} } from "./types";

const deps = dependencyTree.toList({
  directory: ".",
  filename: module.createRequire(import.meta.url).resolve("../impl"),
  filter: (path) => !path.includes(".rtag") && !path.includes("node_modules"),
});
let impl = new (await import("../impl")).Impl();
chokidar.watch(deps).on("change", async () => {
  try {
    impl = new (await import(`../impl.ts#${Math.random()}`)).Impl();
  } catch (e) {
    console.error("Failed to reload:", e);
  }
});

type StateId = bigint;
type UserId = string;
type State = ReturnType<typeof impl.{{initialize}}>;
interface UpdateRequest {
  method: string;
  msgId: string;
  args: any;
}

const dataDir = join(dirname(fileURLToPath(import.meta.url)), "data");
if (!existsSync(dataDir)) {
  mkdirSync(dataDir);
}
const log = new LogStore(dataDir);
const states: Map<StateId, State & { _rng: ReturnType<seedrandom> }> = new Map();
const changedStates: Set<StateId> = new Set();
const userResponses: Map<StateId, Map<UserId, Record<string, {{error.typeString}} | null>>> = new Map();
const subscriptions: Map<StateId, Map<UserId, UserData>> = new Map();

class Store {
  constructor() {
    setInterval(() => {
      changedStates.forEach((stateId) => {
        const responses = userResponses.get(stateId);
        subscriptions.get(stateId)!.forEach((user) => {
          sendUpdate(stateId, user, responses?.get(user.id) ?? {});
        });
        userResponses.delete(stateId);
      });
      userResponses.forEach((responses, stateId) => {
        subscriptions.get(stateId)!.forEach((user) => {
          if (responses.has(user.id)) {
            sendUpdate(stateId, user, responses.get(user.id)!);
          }
        });
      });
      changedStates.clear();
      userResponses.clear();
    }, 100);
    {{#if tick}}

    let prevUpdateTime = Date.now();
    setInterval(() => {
      const currTime = Date.now();
      states.forEach((state, stateId) => {
        const timeDelta = currTime - prevUpdateTime;
        const result = impl.onTick(state, ctx(state._rng, currTime), timeDelta / 1000);
        if (result.type === "modified") {
          changedStates.add(stateId);
          log.append(stateId, currTime, encode({ timeDelta }));
        }
      });
      prevUpdateTime = currTime;
    }, 50);
    {{/if}}
  }
  subscribeUser(stateId: StateId, userBuffer: Buffer, argsBuffer: Buffer) {
    const user = decode(userBuffer) as UserData;
    if (argsBuffer.length > 0) {
      const args = decode(argsBuffer) as {{makeRequestName initialize}};
      const seed = randomBytes(8).readBigUInt64LE().toString(36);
      const rng = seedrandom(seed);
      const time = Date.now();
      const state = impl.{{initialize}}(user, ctx(rng, time), args);
      states.set(stateId, Object.assign(state, { _rng: rng }));
      log.append(stateId, time, encode({ seed, user, args }));
    } else {
      if (!states.has(stateId)) {
        const state = loadState(stateId);
        if (state === undefined) {
          return;
        }
        states.set(stateId, state);
      }
    }
    if (!subscriptions.has(stateId)) {
      subscriptions.set(stateId, new Map([[user.id, user]]));
    } else {
      subscriptions.get(stateId)!.set(user.id, user);
    }
    sendUpdate(stateId, user, {});
  }
  unsubscribeUser(stateId: StateId, userId: UserId) {
    if (!states.has(stateId)) {
      return;
    }
    const users = subscriptions.get(stateId)!;
    if (users.size > 1) {
      users.delete(userId);
    } else {
      subscriptions.delete(stateId);
      states.delete(stateId);
      log.unload(stateId);
    }
  }
  handleUpdate(stateId: StateId, userId: UserId, data: Buffer) {
    const state = states.get(stateId);
    if (state === undefined) {
      return;
    }
    const { method, args, msgId } = decode(data) as UpdateRequest;
    const time = Date.now();
    const user = subscriptions.get(stateId)!.get(userId)!;
    const result = getResult(state, user, method, ctx(state._rng, time), args);
    if (result !== undefined) {
      if (result.type === "modified") {
        changedStates.add(stateId);
        log.append(stateId, time, encode({ method, user, args }));
      }
      const response = result.type === "modified" ? null : result.error ?? null;
      if (!userResponses.has(stateId)) {
        userResponses.set(stateId, new Map([[user.id, { [msgId]: response }]]));
      } else {
        if (!userResponses.get(stateId)!.has(user.id)) {
          userResponses.get(stateId)!.set(user.id, { [msgId]: response });
        } else {
          userResponses.get(stateId)!.get(user.id)![msgId] = response;
        }
      }
    }
  }
}

const proxy = await register(new Store());

function getResult(state: State, user: UserData, method: string, ctx: Context, args: any) {
  switch (method) {
    {{#each methods}}
    {{#if (ne @key ../initialize)}}
    case "{{@key}}":
      return impl.{{@key}}(state, user, ctx, args);
    {{/if}}
    {{/each}}
    default:
      return undefined;
  }
}

function loadState(stateId: StateId) {
  try {
    const rows = log.load(stateId);

    const { time, record } = rows[0];
    const { seed, user, args } = decode(record) as { seed: string; user: UserData; args: {{makeRequestName initialize}} };
    const rng = seedrandom(seed);
    const state = impl.createGame(user, ctx(rng, time), args);

    for (let i = 1; i < rows.length; i++) {
      const { time, record } = rows[i];
      const data = decode(record) as object;
      {{#if tick}}
      if ("timeDelta" in data) {
        const { timeDelta } = data as { timeDelta: number };
        impl.onTick(state, ctx(rng, time), timeDelta / 1000);
        continue;
      }
      {{/if}}
      const { method, user, args } = data as { method: string; user: UserData; args: any };
      getResult(state, user, method, ctx(rng, time), args);
    }

    return Object.assign(state, { _rng: rng });
  } catch (e) {
    console.error("Unable to load state:", e);
  }
}

function sendUpdate(stateId: StateId, user: UserData, responses: Record<string, string | null>) {
  const state = impl.getUserState(states.get(stateId)!, user);
  return proxy.onNewUserState(stateId, user.id, Buffer.from(encode({ state, responses }, { ignoreUndefined: true })));
}

function ctx(rng: ReturnType<seedrandom>, time: number) {
  return {
    rand: () => rng(),
    randInt: (limit?: number) => (limit === undefined ? rng.int32() : Math.floor(rng() * limit)),
    time: () => time,
  };
}
