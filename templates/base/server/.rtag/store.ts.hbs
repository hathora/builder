import module from "module";
import onChange from "on-change";
import dependencyTree from "dependency-tree";
import chokidar from "chokidar";
import { UserData, {{userState}} as UserState, {{makeRequestName initialize}} } from "./types";

const deps = dependencyTree.toList({
  directory: ".",
  filename: module.createRequire(import.meta.url).resolve("../impl"),
  filter: (path) => !path.includes(".rtag") && !path.includes("node_modules"),
});
let impl = new (await import("../impl")).Impl();
chokidar.watch(deps).on("change", async () => {
  impl = new (await import(`../impl.ts#${Math.random()}`)).Impl();
});

type StateId = string;
type State = ReturnType<typeof impl.{{initialize}}>;
const states: Map<StateId, State> = new Map();
const changedStates: Set<StateId> = new Set();
const subscriptions: Map<StateId, Set<UserData>> = new Map();

export default class Store {
  constructor(onNewUserState: (stateId: StateId, user: UserData, userState: UserState) => void) {
    setInterval(() => {
      {{#if tick}}
      states.forEach((state) => impl.onTick(state, ctx()));
      {{/if}}
      changedStates.forEach((stateId) => {
        subscriptions
          .get(stateId)!
          .forEach((user) => onNewUserState(stateId, user, impl.getUserState(states.get(stateId)!, user, ctx())));
      });
      changedStates.clear();
    }, 50);
  }
  newState(stateId: StateId, user: UserData, req: {{makeRequestName initialize}}) {
    const state = impl.{{initialize}}(user, ctx(), req);
    states.set(
      stateId,
      onChange(state, () => {
        changedStates.add(stateId);
      })
    );
  }
  handleUpdate(stateId: StateId, user: UserData, method: string, args: any) {
    const state = states.get(stateId)!;
    switch (method) {
      {{#each methods}}
      {{#if (ne @key ../initialize)}}
      case "{{@key}}":
        return impl.{{@key}}(state, user, ctx(), args);
      {{/if}}
      {{/each}}
    }
    throw new Error(`Invalid method ${method}`);
  }
  hasState(stateId: StateId) {
    return states.has(stateId);
  }
  getUserState(stateId: StateId, user: UserData) {
    const state = states.get(stateId);
    return state !== undefined ? impl.getUserState(state, user, ctx()) : undefined;
  }
  subscribeUser(stateId: StateId, user: UserData) {
    if (!subscriptions.has(stateId)) {
      subscriptions.set(stateId, new Set([user]));
    } else {
      subscriptions.get(stateId)!.add(user);
    }
  }
  unsubscribeUser(stateId: StateId, user: UserData) {
    const users = subscriptions.get(stateId)!;
    if (users.size > 1) {
      users.delete(user);
    } else {
      subscriptions.delete(stateId);
    }
  }
}

function ctx() {
  return {
    randInt: () => Math.random(),
    time: () => Date.now(),
  };
}
