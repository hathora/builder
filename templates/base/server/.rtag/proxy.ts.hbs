import WebSocket from "ws";
import { Socket } from "net";
import express from "express";
import { createServer } from "vite";
import * as http from "http";
import { randomBytes } from "crypto";
import { encode } from "@msgpack/msgpack";
import { getStore } from "./protocol";
import { authMiddleware, getUserFromToken } from "./auth";
import { UserData } from "./types";

type StateId = bigint;
type Connection = WebSocket & { isAlive: boolean };

const app = express();
const server = http.createServer(app);
const wss = new WebSocket.Server({ noServer: true });
const vite = await createServer({
  server: { middlewareMode: "html" },
  root: "{{appEntryPath}}",
  resolve: {
    alias: { vue: "vue/dist/vue.esm.js" },
  },
});

const connections: Map<string, Set<Connection>> = new Map();
const store = await getStore(onNewUserState);

app.use(express.json());
app.use(authMiddleware());
app.use(vite.middlewares);

server.on("upgrade", (req: http.IncomingMessage, socket: Socket, head: Buffer) => {
  wss.handleUpgrade(req, socket, head, (ws) => {
    ws.once("message", (token) => {
      const user = getUserFromToken(token as string);
      ws.once("message", (data) => {
        const connection = Object.assign(ws, { isAlive: true });
        const stateId =
          typeof data === "string"
            ? updateExistingState(user, connection, data as string)
            : createNewState(user, connection, data as Buffer);
        handleConnection(stateId, user.id, connection);
      });
    });
  });
});

const port = process.env.PORT || 3000;
server.listen(port, () => {
  console.log(`listening on http://localhost:${port}`);
});

setInterval(() => {
  connections.forEach((sockets) => {
    sockets.forEach((socket) => {
      if (!socket.isAlive) {
        socket.terminate();
      } else {
        socket.isAlive = false;
        socket.ping(() => {});
      }
    });
  });
}, 30000);

function createNewState(user: UserData, connection: Connection, data: Buffer) {
  const stateId = randomBytes(8).readBigUInt64LE();
  connection.send(stateId.toString(36));
  connections.set(stateId + user.id, new Set([connection]));
  store.newState(stateId, Buffer.from(encode(user)), data);
  return stateId;
}

function updateExistingState(user: UserData, connection: Connection, data: string) {
  const stateId = [...data].reduce((r, v) => r * BigInt(36) + BigInt(parseInt(v, 36)), 0n);
  const client = stateId + user.id;
  if (!connections.has(client)) {
    connections.set(client, new Set([connection]));
    store.subscribeUser(stateId, Buffer.from(encode(user)));
  } else {
    connections.get(client)!.add(connection);
  }
  return stateId;
}

function handleConnection(stateId: StateId, userId: string, socket: Connection) {
  socket.on("close", () => {
    deleteConnection(stateId, userId, socket);
  });
  socket.on("pong", () => {
    socket.isAlive = true;
  });
  socket.on("message", (data) => {
    store.handleUpdate(stateId, userId, data as Buffer);
  });
}

function deleteConnection(stateId: StateId, userId: string, socket: Connection) {
  const client = stateId + userId;
  connections.get(client)!.delete(socket);
  if (connections.get(client)!.size === 0) {
    connections.delete(client);
    store.unsubscribeUser(stateId, userId);
  }
}

function onNewUserState(stateId: StateId, userId: string, data: Buffer) {
  const client = stateId + userId;
  connections.get(client)!.forEach((socket) => {
    socket.send(data);
  });
}
