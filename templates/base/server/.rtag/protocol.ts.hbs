import net from "net";
import retry from "retry";
import { SmartBuffer } from "smart-buffer";

const NEW_STATE = 0;
const SUBSCRIBE_USER = 1;
const UNSUBSCRIBE_USER = 2;
const HANDLE_UPDATE = 3;

export function register(store: Store): Promise<ProxyClient> {
  return new Promise((resolve, reject) => {
    const socket = new net.Socket();
    const operation = retry.operation();
    operation.attempt(() => {
      socket.connect(7147, "rtag.dev", () => {
        socket.setKeepAlive(true, 30000);
        socket.write("{{env "APP_SECRET"}}");
        console.log("Connected to proxy");
        resolve(new ProxyClient(socket));
      });
    });
    socket.on("error", (err) => {
      if (!operation.retry(err)) {
        reject(operation.mainError);
      }
    });
    socket.on("data", (data) => {
      const reader = SmartBuffer.fromBuffer(data);
      const type = reader.readInt8();
      if (type === NEW_STATE) {
        store.newState(
          reader.readBigUInt64LE(),
          reader.readBuffer(reader.readUInt32LE()),
          reader.readBuffer(reader.readUInt32LE())
        );
      } else if (type === SUBSCRIBE_USER) {
        store.subscribeUser(reader.readBigUInt64LE(), reader.readBuffer(reader.readUInt32LE()));
      } else if (type === UNSUBSCRIBE_USER) {
        store.unsubscribeUser(reader.readBigUInt64LE(), reader.readStringNT());
      } else if (type === HANDLE_UPDATE) {
        store.handleUpdate(reader.readBigUInt64LE(), reader.readStringNT(), reader.readBuffer(reader.readUInt32LE()));
      }
    });
  });
}

interface Store {
  newState(stateId: bigint, userBuffer: Buffer, args: Buffer): void;
  subscribeUser(stateId: bigint, userBuffer: Buffer): void;
  unsubscribeUser(stateId: bigint, userId: string): void;
  handleUpdate(stateId: bigint, userId: string, data: Buffer): void;
}

class ProxyClient {
  constructor(private socket: net.Socket) {}

  public onNewUserState(stateId: bigint, userId: string, data: Buffer) {
    const buf = new SmartBuffer()
      .writeBigUInt64LE(stateId)
      .writeStringNT(userId)
      .writeUInt32LE(data.length)
      .writeBuffer(data);
    this.socket.write(buf.toBuffer());
  }
}
