import jwt from "jsonwebtoken";
import express from "express";
{{#if auth.anonymous}}
import { uniqueNamesGenerator, adjectives, colors, animals } from "unique-names-generator";
{{/if}}
{{#if auth.google}}
import { OAuth2Client } from "google-auth-library";
{{/if}}
import { UserData } from "./types";

const JWT_SECRET = "secret";

export function authMiddleware() {
  const router = express.Router();
{{#each auth}}
{{#if (eq @key "anonymous")}}
  router.post("/login/anonymous", (_, res) => {
    const id = Math.random().toString(36).substring(2);
    const name = uniqueNamesGenerator({ dictionaries: [adjectives, colors, animals], separator: "{{separator}}" });
    const user: UserData = { type: "anonymous", id, name };
    res.json({ token: jwt.sign(user, JWT_SECRET) });
  });
{{else if (eq @key "google")}}
  const GOOGLE_CLIENT_ID = "{{clientId}}";
  const googleClient = new OAuth2Client(GOOGLE_CLIENT_ID);
  router.post("/login/google", async (req, res) => {
    const { idToken }: { idToken: string } = req.body;
    const payload = (await googleClient.verifyIdToken({ idToken, audience: GOOGLE_CLIENT_ID })).getPayload();
    if (payload === undefined) {
      res.status(401).send("Invalid google access token");
      return;
    }
    const user: UserData = {
      type: "google",
      id: payload.sub,
      name: payload.name!,
      email: payload.email!,
      locale: payload.locale!,
      picture: payload.picture!,
    };
    res.json({ token: jwt.sign(user, JWT_SECRET) });
  });
{{/if}}
{{/each}}
  return router;
}

export function getUserFromToken(token: string): UserData {
  return jwt.verify(token, JWT_SECRET) as UserData;
}
