import { randomBytes } from "crypto";
import { existsSync, mkdirSync } from "fs";
import seedrandom from "seedrandom";
import { Writer, Reader } from "bin-serde";
import "dotenv/config";
import { Message, NO_DIFF } from "../../api/base";
import { UserId, encodeStateSnapshot, encodeStateUpdate, {{userState}} as UserState } from "../../api/types";
import { register } from "./protocol";
import LogStore from "./logstore";
import { ImplWrapper as impl } from "./wrapper";
import { computeDiff } from "./diff";
import { Context } from "./methods";

type StateId = bigint;
type State = ReturnType<typeof impl.initialize>;
type UserInfo = { userState: UserState; changedAt: number; messages: Message[] };
type StateInfo = { state: State; rng: ReturnType<seedrandom>; subscriptions: Map<UserId, UserInfo> };

const stateInfo: Map<StateId, StateInfo> = new Map();
const changedStates: Map<StateId, number> = new Map();
const pendingMessages: Map<StateId, Set<UserId>> = new Map();

const dataDir = process.env.DATA_DIR!;
if (!existsSync(dataDir)) {
  mkdirSync(dataDir);
}
const log = new LogStore(dataDir);

class Store {
  constructor() {
    setInterval(() => {
      changedStates.forEach((changedAt, stateId) => sendUpdates(stateId, changedAt));
      changedStates.clear();
      pendingMessages.forEach((userIds, stateId) => userIds.forEach((userId) => sendMessages(stateId, userId)));
      pendingMessages.clear();
    }, 50);
    {{#if tick}}

    let prevUpdateTime = Date.now();
    setInterval(() => {
      const currTime = Date.now();
      stateInfo.forEach(({ state, rng }, stateId) => {
        const timeDelta = currTime - prevUpdateTime;
        impl.onTick(state, ctx(rng, currTime, stateId), timeDelta / 1000);
        const changedAt = impl.changedAt();
        if (changedAt !== undefined) {
          changedStates.set(stateId, changedAt);
          pendingMessages.delete(stateId);
          log.append(stateId, currTime, new Writer().writeUInt8(0xff).writeUInt32(timeDelta).toBuffer());
        }
      });
      prevUpdateTime = currTime;
    }, {{tick}});
    {{/if}}
  }
  async newState(stateId: StateId, userId: UserId, argsBuffer: Buffer) {
    const seed = randomBytes(8).readBigUInt64LE();
    const time = Date.now();
    const rng = seedrandom(seed.toString(36));
    const state = impl.initialize(userId, ctx(rng, time, stateId), argsBuffer);
    stateInfo.set(stateId, { state, rng, subscriptions: new Map() });
    sendSnapshot(stateId, userId);
    log.append(
      stateId,
      time,
      new Writer()
        .writeUInt64(seed)
        .writeString(userId)
        .writeUInt32(argsBuffer.length)
        .writeBuffer(argsBuffer)
        .toBuffer()
    );
  }
  async subscribeUser(stateId: StateId, userId: UserId) {
    if (!stateInfo.has(stateId)) {
      const loaded = loadState(stateId);
      if (loaded === undefined) {
        coordinator.onStateUpdate(stateId, userId, Buffer.alloc(0));
        return;
      }
      stateInfo.set(stateId, { state: loaded.state, rng: loaded.rng, subscriptions: new Map() });
    }
    sendSnapshot(stateId, userId);
  }
  unsubscribeUser(stateId: StateId, userId: UserId) {
    if (!stateInfo.has(stateId)) {
      return;
    }
    const subscribers = stateInfo.get(stateId)!.subscriptions;
    if (subscribers.size > 1) {
      subscribers.delete(userId);
    } else {
      stateInfo.delete(stateId);
      changedStates.delete(stateId);
      pendingMessages.delete(stateId);
      log.unload(stateId);
    }
  }
  handleUpdate(stateId: StateId, userId: UserId, data: Buffer) {
    if (!stateInfo.has(stateId)) {
      return;
    }
    const { state, rng, subscriptions } = stateInfo.get(stateId)!;
    const reader = new Reader(data);
    const [method, msgId, argsBuffer] = [
      reader.readUInt8(),
      reader.readUInt32(),
      reader.readBuffer(reader.remaining()),
    ];
    const time = Date.now();
    const response = impl.getResult(state, userId, method, ctx(rng, time, stateId), argsBuffer);
    if (response !== undefined && subscriptions.has(userId)) {
      subscriptions.get(userId)!.messages.push(Message.response(msgId, response));
      const changedAt = impl.changedAt();
      if (changedAt !== undefined) {
        changedStates.set(stateId, changedAt);
        pendingMessages.delete(stateId);
        log.append(
          stateId,
          time,
          new Writer()
            .writeUInt8(method)
            .writeString(userId)
            .writeUInt32(argsBuffer.length)
            .writeBuffer(argsBuffer)
            .toBuffer()
        );
      } else {
        if (!pendingMessages.has(stateId)) {
          pendingMessages.set(stateId, new Set());
        }
        pendingMessages.get(stateId)!.add(userId);
      }
    }
  }
}

const coordinator = await register(new Store());

function loadState(stateId: StateId) {
  try {
    const rows = log.load(stateId);

    const { time, record } = rows[0];
    const reader = new Reader(record);
    const seed = reader.readUInt64();
    const userId = reader.readString();
    const argsBuffer = reader.readBuffer(reader.readUInt32());
    const rng = seedrandom(seed.toString(36));
    const state = impl.initialize(userId, ctx(rng, time), argsBuffer);

    for (let i = 1; i < rows.length; i++) {
      const { time, record } = rows[i];
      const reader = new Reader(record);
      const method = reader.readUInt8();
      {{#if tick}}
      if (method === 0xff) {
        const timeDelta = reader.readUInt32();
        impl.onTick(state, ctx(rng, time), timeDelta / 1000);
        continue;
      }
      {{/if}}
      const userId = reader.readString();
      const argsBuffer = reader.readBuffer(reader.readUInt32());
      impl.getResult(state, userId, method, ctx(rng, time), argsBuffer);
    }

    return { state, rng };
  } catch (e) {
    console.error("Unable to load state", stateId.toString(36), e);
  }
}

function sendSnapshot(stateId: StateId, userId: UserId) {
  const { state, subscriptions } = stateInfo.get(stateId)!;
  const userState = impl.getUserState(state, userId);
  subscriptions.set(userId, { userState: JSON.parse(JSON.stringify(userState)), changedAt: 0, messages: [] });
  coordinator.onStateUpdate(stateId, userId, Buffer.from(encodeStateSnapshot(userState)));
}

function sendUpdates(stateId: StateId, changedAt: number) {
  if (stateInfo.has(stateId)) {
    const { state, subscriptions } = stateInfo.get(stateId)!;
    for (const [userId, userInfo] of subscriptions) {
      const { userState: prevUserState, changedAt: prevChangedAt, messages } = userInfo!;
      const currUserState = impl.getUserState(state, userId);
      const diff = computeDiff(currUserState, prevUserState);
      const buf = Buffer.from(
        encodeStateUpdate(diff !== NO_DIFF ? diff : undefined, changedAt - prevChangedAt, messages)
      );
      coordinator.onStateUpdate(stateId, userId, buf);
      subscriptions.set(userId, { userState: JSON.parse(JSON.stringify(currUserState)), changedAt, messages: [] });
    }
  }
}

function sendMessages(stateId: StateId, userId: UserId) {
  const messages = stateInfo.get(stateId)?.subscriptions.get(userId)?.messages;
  if (messages !== undefined) {
    const buf = Buffer.from(encodeStateUpdate(undefined, 0, messages));
    coordinator.onStateUpdate(stateId, userId, buf);
  }
}

function ctx(rng: ReturnType<seedrandom>, time: number, stateId?: StateId): Context {
  return {
    rand() {
      return rng();
    },
    randInt(limit?: number) {
      return limit === undefined ? rng.int32() : Math.floor(rng() * limit);
    },
    shuffle<T>(items: T[]) {
      const shuffled = [...items];
      for (let i = shuffled.length - 1; i > 0; i--) {
        const j = Math.floor(rng() * (i + 1));
        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
      }
      return shuffled;
    },
    time() {
      return time;
    },
    event(event: string, userId: UserId) {
      if (stateId !== undefined) {
        stateInfo.get(stateId)?.subscriptions.get(userId)?.messages.push(Message.event(event));
      }
    },
  };
}
