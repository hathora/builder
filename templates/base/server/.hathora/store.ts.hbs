import { randomBytes } from "crypto";
import { existsSync, mkdirSync } from "fs";
import { Chance } from "chance";
import { v4 as uuidv4 } from "uuid";
import { Writer, Reader } from "bin-serde";
import { LogStore } from "@hathora/log-store";
import { register, RoomId } from "@hathora/server-sdk";

import { COORDINATOR_HOST, Message, NO_DIFF } from "../../api/base";
import {
  UserId,
  encodeStateSnapshot,
  encodeStateUpdate,
  {{userState}} as UserState,
  encodeStateError,
  HathoraEventTypes,
  HathoraEventPayloads,
} from "../../api/types";
import { ImplWrapper } from "./wrapper";
import { computeDiff } from "./diff";
import { Context } from "./methods";

type UserInfo = { userState: UserState; changedAt: number; messages: Message[] };
type StateInfo = { impl: ImplWrapper; chance: Chance.Chance; subscriptions: Map<UserId, UserInfo> };

const stateInfo: Map<RoomId, StateInfo> = new Map();
const changedStates: Map<RoomId, number> = new Map();
const pendingMessages: Map<RoomId, Set<UserId>> = new Map();

const dataDir = process.env.DATA_DIR!;
if (!existsSync(dataDir)) {
  mkdirSync(dataDir);
}
const log = new LogStore(dataDir);

class Store {
  constructor() {
    {{#if tick}}
    let prevUpdateTime = Date.now();
    {{/if}}
    setInterval(() => {
      {{#if tick}}
      const currTime = Date.now();
      stateInfo.forEach(async ({ impl, chance, subscriptions }, stateId) => {
        if (subscriptions.size > 0) {
          const timeDelta = currTime - prevUpdateTime;
          await impl.onTick(ctx(chance, currTime, stateId), timeDelta / 1000);
          const changedAt = impl.changedAt();
          if (changedAt !== undefined) {
            changedStates.set(stateId, changedAt);
            pendingMessages.delete(stateId);
            log.append(stateId, currTime, new Writer().writeUInt8(0xff).writeUVarint(timeDelta).toBuffer());
          }
        }
      });
      prevUpdateTime = currTime;

      {{/if}}
      changedStates.forEach((changedAt, stateId) => sendUpdates(stateId, changedAt));
      changedStates.clear();
      pendingMessages.forEach((userIds, stateId) => userIds.forEach((userId) => sendMessages(stateId, userId)));
      pendingMessages.clear();
    }, {{#if tick}}{{tick}}{{else}}50{{/if}});
    setInterval(() => {
      stateInfo.forEach(({ subscriptions }, stateId) => {
        if (subscriptions.size === 0) {
          stateInfo.delete(stateId);
          log.unload(stateId);
        }
      });
    }, 10000);
  }
  async newState(stateId: RoomId, userId: UserId, data: Buffer) {
    const seed = randomBytes(8).readBigUInt64LE();
    const time = Date.now();
    const chance = Chance(seed.toString());
    const impl = new ImplWrapper(ctx(chance, time, stateId), data);
    stateInfo.set(stateId, { impl, chance, subscriptions: new Map() });
    log.append(
      stateId,
      time,
      new Writer().writeUInt64(seed).writeString(userId).writeUVarint(data.length).writeBuffer(data).toBuffer()
    );
  }
  async subscribeUser(stateId: RoomId, userId: UserId) {
    if (!stateInfo.has(stateId)) {
      const loaded = await loadState(stateId);
      if (loaded === undefined) {
        coordinator.closeConnection(stateId, userId, "State not found");
        return;
      }
      stateInfo.set(stateId, { impl: loaded.impl, chance: loaded.chance, subscriptions: new Map() });
    }
    sendSnapshot(stateId, userId);
  }
  unsubscribeUser(stateId: RoomId, userId: UserId) {
    if (!stateInfo.has(stateId)) {
      return;
    }
    const subscribers = stateInfo.get(stateId)!.subscriptions;
    subscribers.delete(userId);
    if (subscribers.size === 0) {
      changedStates.delete(stateId);
      pendingMessages.delete(stateId);
    }
  }
  unsubscribeAll() {
    stateInfo.forEach(({ subscriptions }, stateId) => {
      subscriptions.clear();
      changedStates.delete(stateId);
      pendingMessages.delete(stateId);
    });
  }
  async onMessage(stateId: RoomId, userId: UserId, data: Buffer) {
    if (!stateInfo.has(stateId)) {
      return;
    }
    const { impl, chance, subscriptions } = stateInfo.get(stateId)!;
    const reader = new Reader(data);
    const [method, msgId, argsBuffer] = [
      reader.readUInt8(),
      reader.readUInt32(),
      reader.readBuffer(reader.remaining()),
    ];
    const time = Date.now();
    const response = await impl.getResult(userId, method, ctx(chance, time, stateId), argsBuffer);
    if (subscriptions.has(userId)) {
      subscriptions.get(userId)!.messages.push(Message.response(msgId, response));
      const changedAt = impl.changedAt();
      if (changedAt !== undefined) {
        changedStates.set(stateId, changedAt);
        pendingMessages.delete(stateId);
        log.append(
          stateId,
          time,
          new Writer()
            .writeUInt8(method)
            .writeString(userId)
            .writeUVarint(argsBuffer.length)
            .writeBuffer(argsBuffer)
            .toBuffer()
        );
      } else {
        addPendingMessage(stateId, userId);
      }
    }
  }
}

const coordinator = await register({
  coordinatorHost: COORDINATOR_HOST,
  appSecret: "{{appSecret}}",
  storeId: process.env.STORE_ID ?? uuidv4(),
  authInfo: {
{{#each auth}}
{{#if (eq @key "anonymous")}}
    anonymous: { separator: "{{separator}}" },
{{else if (eq @key "nickname")}}
    nickname: {},
{{else if (eq @key "google")}}
    google: { clientId: "{{clientId}}" },
{{else if (eq @key "siwe")}}

{{/if}}
{{/each}}
  },
  store: new Store(),
});
const { host, storeId } = coordinator;
console.log(`Connected to coordinator at ${host} with appId {{appId}} and storeId ${storeId}`);

export async function loadState(stateId: RoomId) {
  let rows;
  try {
    rows = log.load(stateId);
  } catch (e) {
    console.error("Unable to load state", stateId.toString(36));
    return;
  }

  const { time, record } = rows[0];
  const reader = new Reader(record);
  const seed = reader.readUInt64();
  const userId = reader.readString();
  const argsBuffer = reader.readBuffer(reader.readUVarint());
  const chance = Chance(seed.toString());
  const impl = new ImplWrapper(ctxNoEvents(chance, time), argsBuffer);

  for (let i = 1; i < rows.length; i++) {
    const { time, record } = rows[i];
    const reader = new Reader(record);
    const method = reader.readUInt8();
    {{#if tick}}
    if (method === 0xff) {
      const timeDelta = reader.readUVarint();
      await impl.onTick(ctxNoEvents(chance, time), timeDelta / 1000);
      continue;
    }
    {{/if}}
    const userId = reader.readString();
    const argsBuffer = reader.readBuffer(reader.readUVarint());
    await impl.getResult(userId, method, ctxNoEvents(chance, time), argsBuffer);
  }

  return { impl, chance };
}

async function sendSnapshot(stateId: RoomId, userId: UserId) {
  const { impl, subscriptions } = stateInfo.get(stateId)!;
  const userState = await impl.getUserState(userId);
  const validationErrors = UserState.validate(userState);
  if (validationErrors.length > 0) {
    console.error("Invalid user state: ", validationErrors);
    coordinator.sendMessage(stateId, userId, Buffer.from(encodeStateError()));
    return;
  }
  subscriptions.set(userId, { userState: JSON.parse(JSON.stringify(userState)), changedAt: 0, messages: [] });
  const buf = encodeStateSnapshot(userState);
  coordinator.sendMessage(stateId, userId, Buffer.from(buf));
}

async function sendUpdates(stateId: RoomId, changedAt: number) {
  if (stateInfo.has(stateId)) {
    const { impl, subscriptions } = stateInfo.get(stateId)!;
    for (const [userId, userInfo] of subscriptions) {
      const { userState: prevUserState, changedAt: prevChangedAt, messages } = userInfo!;
      const currUserState = await impl.getUserState(userId);
      const validationErrors = UserState.validate(currUserState);
      if (validationErrors.length > 0) {
        console.error("Invalid user state: ", validationErrors);
        coordinator.sendMessage(stateId, userId, Buffer.from(encodeStateError()));
        return;
      }
      const diff = computeDiff(currUserState, prevUserState);
      if (diff !== NO_DIFF || messages.length > 0) {
        const buf = encodeStateUpdate(diff !== NO_DIFF ? diff : undefined, changedAt - prevChangedAt, messages);
        coordinator.sendMessage(stateId, userId, Buffer.from(buf));
        subscriptions.set(userId, { userState: JSON.parse(JSON.stringify(currUserState)), changedAt, messages: [] });
      }
    }
  }
}

function sendMessages(stateId: RoomId, userId: UserId) {
  const messages = stateInfo.get(stateId)?.subscriptions.get(userId)?.messages;
  if (messages !== undefined) {
    const buf = encodeStateUpdate(undefined, 0, messages);
    coordinator.sendMessage(stateId, userId, Buffer.from(buf));
    messages.splice(0);
  }
}

function ctx(chance: Chance.Chance, time: number, stateId: RoomId): Context {
  return {
    chance,
    time,
    sendEvent<EventType extends HathoraEventTypes>(
      event: EventType,
      data: HathoraEventPayloads[EventType],
      userId: UserId
    ) {
      const userInfo = stateInfo.get(stateId)?.subscriptions.get(userId);
      if (userInfo !== undefined) {
        userInfo.messages.push(Message.event(event, data));
        if (!changedStates.has(stateId)) {
          addPendingMessage(stateId, userId);
        }
      }
    },
    broadcastEvent<EventType extends HathoraEventTypes>(event: EventType, data: HathoraEventPayloads[EventType]) {
      if (stateInfo.has(stateId)) {
        for (const [userId, { messages }] of stateInfo.get(stateId)!.subscriptions) {
          messages.push(Message.event(event, data));
          if (!changedStates.has(stateId)) {
            addPendingMessage(stateId, userId);
          }
        }
      }
    },
  };
}

function ctxNoEvents(chance: Chance.Chance, time: number): Context {
  return { chance, time, sendEvent() {}, broadcastEvent() {} };
}

function addPendingMessage(stateId: RoomId, userId: UserId) {
  if (!pendingMessages.has(stateId)) {
    pendingMessages.set(stateId, new Set());
  }
  pendingMessages.get(stateId)!.add(userId);
}
