import { randomBytes } from "crypto";
import { existsSync, mkdirSync } from "fs";
import { Chance } from "chance";
import { Writer, Reader } from "bin-serde";
import { LogStore } from "@hathora/log-store";
import {
  UserId,
  RoomId,
  Application,
  startServer,
  verifyJwt,
  Server,
} from "@hathora/server-sdk";

import { Message, NO_DIFF } from "../../api/base";
import {
  encodeStateSnapshot,
  encodeStateUpdate,
  {{userState}} as UserState,
  encodeStateError,
  HathoraEventTypes,
  HathoraEventPayloads,
} from "../../api/types";
import { ImplWrapper } from "./wrapper";
import { computeDiff } from "./diff";
import { Context } from "./methods";

type UserInfo = { userState: UserState; changedAt: number; messages: Message[] };
type RoomInfo = { impl: ImplWrapper; chance: Chance.Chance; subscriptions: Map<UserId, UserInfo> };

const rooms: Map<RoomId, RoomInfo> = new Map();
const changedStates: Map<RoomId, number> = new Map();
const pendingMessages: Map<RoomId, Set<UserId>> = new Map();

const dataDir = process.env.DATA_DIR!;
if (!existsSync(dataDir)) {
  mkdirSync(dataDir);
}
const log = new LogStore(dataDir);

{{#if tick}}
let prevUpdateTime = Date.now();
{{/if}}
setInterval(() => {
  {{#if tick}}
  const currTime = Date.now();
  rooms.forEach(async ({ impl, chance, subscriptions }, stateId) => {
    if (subscriptions.size > 0) {
      const timeDelta = currTime - prevUpdateTime;
      await impl.onTick(ctx(chance, currTime, stateId), timeDelta / 1000);
      const changedAt = impl.changedAt();
      if (changedAt !== undefined) {
        changedStates.set(stateId, changedAt);
        pendingMessages.delete(stateId);
        log.append(stateId, currTime, new Writer().writeUInt8(0xff).writeUVarint(timeDelta).toBuffer());
      }
    }
  });
  prevUpdateTime = currTime;

  {{/if}}
  changedStates.forEach((changedAt, stateId) => sendUpdates(stateId, changedAt));
  changedStates.clear();
  pendingMessages.forEach((userIds, stateId) => userIds.forEach((userId) => sendMessages(stateId, userId)));
  pendingMessages.clear();
}, {{#if tick}}{{tick}}{{else}}50{{/if}});
setInterval(() => {
  rooms.forEach(({ subscriptions }, stateId) => {
    if (subscriptions.size === 0) {
      rooms.delete(stateId);
      log.unload(stateId);
    }
  });
}, 10000);

const store: Application = {
  // A function called by Hathora to verify a connecting user's token
  verifyToken(token: string): UserId | undefined {
    const userId = verifyJwt(
      token,
      "{{appSecret}}"
    );

    if (userId === undefined) {
      console.error("Failed to verify token", token);
    }

    return userId;
  },
  async subscribeUser(roomId: RoomId, userId: string): Promise<void> {
    console.log("subscribeUser", { roomId, userId });
    if (!rooms.has(roomId)) {
      const loaded = await loadState(roomId);
      if (loaded === undefined) {
        createRoom(roomId, userId);
      } else {
        rooms.set(roomId, {
          impl: loaded.impl,
          chance: loaded.chance,
          subscriptions: new Map(),
        });
      }
    }
    sendSnapshot(roomId, userId);
  },
  unsubscribeUser(roomId: RoomId, userId: UserId) {
    if (!rooms.has(roomId)) {
      return;
    }
    const subscribers = rooms.get(roomId)!.subscriptions;
    subscribers.delete(userId);
    if (subscribers.size === 0) {
      changedStates.delete(roomId);
      pendingMessages.delete(roomId);
    }
  },
  async onMessage(roomId: RoomId, userId: UserId, data: Buffer): Promise<void> {
    if (!rooms.has(roomId)) {
      return;
    }
    const { impl, chance, subscriptions } = rooms.get(roomId)!;
    const reader = new Reader(new DataView(data));
    const [method, msgId, argsBuffer] = [
      reader.readUInt8(),
      reader.readUInt32(),
      reader.readBuffer(reader.remaining()),
    ];
    const time = Date.now();
    const response = await impl.getResult(
      userId,
      method,
      ctx(chance, time, roomId),
      argsBuffer
    );
    if (subscriptions.has(userId)) {
      subscriptions
        .get(userId)!
        .messages.push(Message.response(msgId, response));
      const changedAt = impl.changedAt();
      if (changedAt !== undefined) {
        changedStates.set(roomId, changedAt);
        pendingMessages.delete(roomId);
        log.append(
          roomId,
          time,
          new Writer()
            .writeUInt8(method)
            .writeString(userId)
            .writeUVarint(argsBuffer.length)
            .writeBuffer(argsBuffer)
            .toBuffer()
        );
      } else {
        addPendingMessage(roomId, userId);
      }
    }
  },
};

function createRoom(roomId: RoomId, userId: UserId) {
  const seed = randomBytes(8).readBigUInt64LE();
  const time = Date.now();
  const chance = Chance(seed.toString());

  // set to default in preparation for removing IInitializeRequest
  const data = Buffer.from("");

  const impl = new ImplWrapper(ctx(chance, time, roomId), data);
  rooms.set(roomId, { impl, chance, subscriptions: new Map() });
  log.append(
    roomId,
    time,
    new Writer()
      .writeUInt64(seed)
      .writeString(userId)
      .writeUVarint(data.length)
      .writeBuffer(data)
      .toBuffer()
  );
}

export async function loadState(stateId: RoomId) {
  let rows;
  try {
    rows = log.load(stateId);
  } catch (e) {
    console.error("No existing state found for", stateId);
    return;
  }

  const { time, record } = rows[0];
  const reader = new Reader(record);
  const seed = reader.readUInt64();
  const userId = reader.readString();
  const argsBuffer = reader.readBuffer(reader.readUVarint());
  const chance = Chance(seed.toString());
  const impl = new ImplWrapper(ctxNoEvents(chance, time), argsBuffer);

  for (let i = 1; i < rows.length; i++) {
    const { time, record } = rows[i];
    const reader = new Reader(record);
    const method = reader.readUInt8();
    {{#if tick}}
    if (method === 0xff) {
      const timeDelta = reader.readUVarint();
      await impl.onTick(ctxNoEvents(chance, time), timeDelta / 1000);
      continue;
    }
    {{/if}}
    const userId = reader.readString();
    const argsBuffer = reader.readBuffer(reader.readUVarint());
    await impl.getResult(userId, method, ctxNoEvents(chance, time), argsBuffer);
  }

  return { impl, chance };
}

async function sendSnapshot(stateId: RoomId, userId: UserId) {
  const { impl, subscriptions } = rooms.get(stateId)!;
  const userState = await impl.getUserState(userId);
  const validationErrors = UserState.validate(userState);
  if (validationErrors.length > 0) {
    console.error("Invalid user state: ", validationErrors);
    server.sendMessage(stateId, userId, Buffer.from(encodeStateError()));
    return;
  }
  subscriptions.set(userId, { userState: JSON.parse(JSON.stringify(userState)), changedAt: 0, messages: [] });
  const buf = encodeStateSnapshot(userState);
  server.sendMessage(stateId, userId, Buffer.from(buf));
}

async function sendUpdates(stateId: RoomId, changedAt: number) {
  if (rooms.has(stateId)) {
    const { impl, subscriptions } = rooms.get(stateId)!;
    for (const [userId, userInfo] of subscriptions) {
      const { userState: prevUserState, changedAt: prevChangedAt, messages } = userInfo!;
      const currUserState = await impl.getUserState(userId);
      const validationErrors = UserState.validate(currUserState);
      if (validationErrors.length > 0) {
        console.error("Invalid user state: ", validationErrors);
        server.sendMessage(stateId, userId, Buffer.from(encodeStateError()));
        return;
      }
      const diff = computeDiff(currUserState, prevUserState);
      if (diff !== NO_DIFF || messages.length > 0) {
        const buf = encodeStateUpdate(diff !== NO_DIFF ? diff : undefined, changedAt - prevChangedAt, messages);
        server.sendMessage(stateId, userId, Buffer.from(buf));
        subscriptions.set(userId, { userState: JSON.parse(JSON.stringify(currUserState)), changedAt, messages: [] });
      }
    }
  }
}

function sendMessages(stateId: RoomId, userId: UserId) {
  const messages = rooms.get(stateId)?.subscriptions.get(userId)?.messages;
  if (messages !== undefined) {
    const buf = encodeStateUpdate(undefined, 0, messages);
    server.sendMessage(stateId, userId, Buffer.from(buf));
    messages.splice(0);
  }
}

function ctx(chance: Chance.Chance, time: number, stateId: RoomId): Context {
  return {
    chance,
    time,
    sendEvent<EventType extends HathoraEventTypes>(
      event: EventType,
      data: HathoraEventPayloads[EventType],
      userId: UserId
    ) {
      const userInfo = rooms.get(stateId)?.subscriptions.get(userId);
      if (userInfo !== undefined) {
        userInfo.messages.push(Message.event(event, data));
        if (!changedStates.has(stateId)) {
          addPendingMessage(stateId, userId);
        }
      }
    },
    broadcastEvent<EventType extends HathoraEventTypes>(event: EventType, data: HathoraEventPayloads[EventType]) {
      if (rooms.has(stateId)) {
        for (const [userId, { messages }] of rooms.get(stateId)!.subscriptions) {
          messages.push(Message.event(event, data));
          if (!changedStates.has(stateId)) {
            addPendingMessage(stateId, userId);
          }
        }
      }
    },
  };
}

function ctxNoEvents(chance: Chance.Chance, time: number): Context {
  return { chance, time, sendEvent() {}, broadcastEvent() {} };
}

function addPendingMessage(stateId: RoomId, userId: UserId) {
  if (!pendingMessages.has(stateId)) {
    pendingMessages.set(stateId, new Set());
  }
  pendingMessages.get(stateId)!.add(userId);
}

const port = 4000;
const server: Server = await startServer(store, port);
console.log(`Server listening on port ${port}`);
