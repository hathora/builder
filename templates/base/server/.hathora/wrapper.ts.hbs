import onChange from "on-change";
import { Context } from "./methods";
import { Response, Method } from "../../api/base";
import {
  UserId,
  {{#each methods}}
  {{makeRequestName @key}},
  {{/each}}
} from "../../api/types";

let impl = new (await import("../impl")).Impl();
setInterval(async () => {
  impl = new (await import("../impl")).Impl();
}, 100);

type State = ReturnType<typeof impl.initialize>;

let changedAt: number | undefined = undefined;

export const ImplWrapper = {
  initialize(userId: UserId, ctx: Context): State {
    const state = impl.initialize(userId, ctx);
    return onChange(state, () => (changedAt = Date.now()));
  },
  getResult(state: State, userId: UserId, method: Method, ctx: Context, argsBuffer: ArrayBufferView): Response | undefined {
    switch (method) {
      {{#each methods}}
      case Method.{{uppercase @key}}:
        return impl.{{@key}}(state, userId, ctx, {{makeRequestName @key}}.decode(argsBuffer));
      {{/each}}
    }
  },
  {{#if tick}}
  onTick(state: State, ctx: Context, timeDelta: number): void {
    impl.onTick(state, ctx, timeDelta);
  },
  {{/if}}
  getUserState(state: State, userId: UserId) {
    return impl.getUserState(onChange.target(state), userId);
  },
  changedAt(): number | undefined {
    const res = changedAt;
    changedAt = undefined;
    return res;
  },
};
