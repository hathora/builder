import axios from "axios";
import { UserId } from "./types";

export enum Method {
  {{#each methods}}
  {{#if (ne @key ../initialize)}}
  {{uppercase @key}},
  {{/if}}
  {{/each}}
}

export type OkResponse = { type: "ok" };
export type ErrorResponse = { type: "error"; error: {{error.typeString}} };
export type Response = OkResponse | ErrorResponse;
export const Response: { ok: () => OkResponse; error: (error: {{error.typeString}}) => ErrorResponse } = {
  ok: () => ({ type: "ok" }),
  error: (error) => ({ type: "error", error }),
};

export type ResponseMessage = { type: "response"; msgId: number; response: Response };
export type EventMessage = { type: "event"; event: string };
export type Message = ResponseMessage | EventMessage;
export const Message: {
  response: (msgId: number, response: Response) => ResponseMessage;
  event: (event: string) => EventMessage;
} = {
  response: (msgId, response) => ({ type: "response", msgId, response }),
  event: (event) => ({ type: "event", event }),
};

{{#each auth}}
export interface {{capitalize @key}}UserData {
  type: "{{@key}}";
  id: string;
{{#if (eq @key "anonymous")}}
  name: string;
{{else if (eq @key "google")}}
  name: string;
  email: string;
  locale: string;
  picture: string;
{{/if}}
}
{{/each}}
export type UserData = {{#each auth}}{{capitalize @key}}UserData{{#unless @last}} | {{/unless}}{{/each}};

export function lookupUser(userId: UserId): Promise<UserData> {
  return axios.get<UserData>(`https://rtag.dev/users/${userId}`).then((res) => res.data);
}

export function getUserDisplayName(user: UserData) {
  switch (user.type) {
    {{#each auth}}
    case "{{@key}}":
      {{#if (eq @key "anonymous")}}
      return user.name;
      {{else if (eq @key "google")}}
      return user.name;
      {{else if (eq @key "email")}}
      return user.email;
      {{/if}}
    {{/each}}
  }
}
