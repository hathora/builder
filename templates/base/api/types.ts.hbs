import { Writer as _Writer, Reader as _Reader } from "bin-serde";
import {
  NO_DIFF as _NO_DIFF,
  DeepPartial as _DeepPartial,
  Response as _Response,
  Message as _Message,
  ResponseMessage as _ResponseMessage,
  EventMessage as _EventMessage,
} from "./base";

{{#each types}}
{{> renderExportArg}}
{{/each}}
{{#each methods}}
export type {{makeRequestName @key}} = {
  {{#each properties}}
  {{@key}}{{#if (eq type "optional")}}?{{/if}}: {{> renderTypeArg}};
  {{/each}}
};
{{/each}}

{{#each types}}
{{> renderTypeValue}}
{{/each}}
{{#each methods}}
export const {{makeRequestName @key}} = {
  default(): {{makeRequestName @key}} {
    return {
      {{#each properties}}
      {{@key}}: {{> renderDefault}},
      {{/each}}
    };
  },
  encode(obj: {{makeRequestName @key}}, writer?: _Writer) {
    const buf = writer ?? new _Writer();
    {{#each properties}}
    {{> renderEncodeArg arg=@key}};
    {{/each}}
    return buf;
  },
  decode(buf: ArrayBufferView | _Reader): {{makeRequestName @key}} {
    const sb = ArrayBuffer.isView(buf) ? new _Reader(buf) : buf;
    return {
      {{#each properties}}
      {{@key}}: {{> renderDecodeArg}},
      {{/each}}
    };
  },
};
{{/each}}
{{#*inline "renderExportArg"}}
{{#if alias}}
export type {{@key}} = {{> renderTypeArg}};
{{else if (eq type "enum")}}
export enum {{@key}} {
  {{#each options}}
  {{label}},
  {{/each}}
}
{{else if (eq type "plugin")}}
{{> renderExportArg item}}
{{else}}
export type {{@key}} = {{> renderTypeArg}};
{{/if}}
{{/inline}}
{{#*inline "renderTypeArg"}}
{{#if alias}}
{{typeString}}
{{~else if (eq type "object")}}
{
  {{#each properties}}
  {{@key}}{{#if (eq type "optional")}}?{{/if}}: {{> renderTypeArg}};
  {{/each}}
}
{{~else if (eq type "union")}}
{{#each options}}{{#unless @first}} | {{/unless}}{ type: "{{> renderTypeArg}}"; val: {{> renderTypeArg}} }{{/each}}
{{~else if (eq type "optional")}}
{{> renderTypeArg item}}
{{~else if (eq type "array")}}
{{> renderTypeArg items}}[]
{{~else if (eq type "int")}}
number
{{~else if (eq type "float")}}
number
{{~else if (eq type "string")}}
string
{{~else if (eq type "boolean")}}
boolean
{{~else if (eq type "plugin")}}
{{> renderTypeArg item}}
{{~/if}}
{{~/inline}}
{{#*inline "renderTypeValue"}}
{{#if (eq type "plugin")}}
{{> renderTypeValue item}}
{{else if (eq type "object")}}
export const {{@key}} = {
  default(): {{@key}} {
    return {
      {{#each properties}}
      {{@key}}: {{> renderDefault}},
      {{/each}}
    };
  },
  encode(obj: {{@key}}, writer?: _Writer) {
    const buf = writer ?? new _Writer();
    {{#each properties}}
    {{> renderEncodeArg arg=@key}};
    {{/each}}
    return buf;
  },
  encodeDiff(obj: _DeepPartial<{{@key}}>, writer?: _Writer) {
    const buf = writer ?? new _Writer();
    const tracker: boolean[] = [];
    {{#each properties}}
    tracker.push(obj.{{@key}} !== _NO_DIFF);
    {{/each}}
    buf.writeBits(tracker);
    {{#each properties}}
    if (obj.{{@key}} !== _NO_DIFF) {
      {{> renderEncodeDiffArg arg=@key}};
    }
    {{/each}}
    return buf;
  },
  decode(buf: ArrayBufferView | _Reader): {{@key}} {
    const sb = ArrayBuffer.isView(buf) ? new _Reader(buf) : buf;
    return {
      {{#each properties}}
      {{@key}}: {{> renderDecodeArg}},
      {{/each}}
    };
  },
  decodeDiff(buf: ArrayBufferView | _Reader): _DeepPartial<{{@key}}> {
    const sb = ArrayBuffer.isView(buf) ? new _Reader(buf) : buf;
    const tracker = sb.readBits({{len properties}});
    return {
      {{#each properties}}
      {{@key}}: tracker.shift() ? {{> renderDecodeDiffArg}} : _NO_DIFF,
      {{/each}}
    };
  },
};
{{else if (eq type "union")}}
export const {{@key}} = {
  values() {
    return [{{#each options}}"{{@key}}"{{#unless @last}}, {{/unless}}{{/each}}];
  },
  encode(obj: {{@key}}, writer?: _Writer) {
    const buf = writer ?? new _Writer();
    {{#each options}}
    {{#unless @first}}else {{/unless}}if (obj.type === "{{@key}}") {
      writeUInt8(buf, {{@index}});
      const x = obj.val;
      {{> renderEncodeArg}};
    }
    {{/each}}
    return buf;
  },
  encodeDiff(obj: _DeepPartial<{{@key}}>, writer?: _Writer) {
    const buf = writer ?? new _Writer();
    {{#each options}}
    {{#unless @first}}else {{/unless}}if (obj.type === "{{@key}}") {
      writeUInt8(buf, {{@index}});
      writeBoolean(buf, obj.val !== _NO_DIFF);
      if (obj.val !== _NO_DIFF) {
        const x = obj.val;
        {{> renderEncodeDiffArg}};
      }
    }
    {{/each}}
    return buf;
  },
  decode(buf: ArrayBufferView | _Reader): {{@key}} {
    const sb = ArrayBuffer.isView(buf) ? new _Reader(buf) : buf;
    const type = parseUInt8(sb);
    {{#each options}}
    {{#unless @first}}else {{/unless}}if (type === {{@index}}) {
      return { type: "{{@key}}", val: {{> renderDecodeArg}} };
    }
    {{/each}}
    throw new Error("Invalid union");
  },
  decodeDiff(buf: ArrayBufferView | _Reader): _DeepPartial<{{@key}}> {
    const sb = ArrayBuffer.isView(buf) ? new _Reader(buf) : buf;
    const type = parseUInt8(sb);
    {{#each options}}
    {{#unless @first}}else {{/unless}}if (type === {{@index}}) {
      return { type: "{{@key}}", val: parseBoolean(sb) ? {{> renderDecodeDiffArg}} : _NO_DIFF };
    }
    {{/each}}
    throw new Error("Invalid union");
  },
}
{{/if}}
{{/inline}}
{{#*inline "renderDefault"}}
{{#if (eq type "array")}}
[]
{{~else if (eq type "int")}}
0
{{~else if (eq type "float")}}
0.0
{{~else if (eq type "string")}}
""
{{~else if (eq type "enum")}}
0
{{~else if (eq type "boolean")}}
false
{{~else if (eq type "optional")}}
undefined
{{~else if (eq type "object")}}
{{typeString}}.default()
{{~else if (eq type "union")}}
{{#each options}}
{{#if @first}}
{ type: "{{@key}}", val: {{> renderDefault}} }
{{~/if}}
{{/each}}
{{~else if (eq type "plugin")}}
{{> renderDefault item}}
{{/if}}
{{/inline}}
{{#*inline "renderEncodeArg"}}
{{#if (eq type "optional")}}
writeOptional(buf, obj.{{arg}}, (x) => {{> renderEncodeArg item}})
{{~else if (eq type "array")}}
writeArray(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}}, (x) => {{> renderEncodeArg items}})
{{~else if (eq type "enum")}}
writeUInt8(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "int")}}
writeInt(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "float")}}
writeFloat(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "string")}}
writeString(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "boolean")}}
writeBoolean(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "plugin")}}
{{> renderEncodeArg item arg=arg}}
{{~else}}
{{typeString}}.encode({{#if arg}}obj.{{arg}}{{else}}x{{/if}}, buf)
{{~/if}}
{{/inline}}
{{#*inline "renderEncodeDiffArg"}}
{{#if (eq type "optional")}}
writeOptional(buf, obj.{{arg}}, (x) => {{> renderEncodeDiffArg item}})
{{~else if (eq type "array")}}
writeArrayDiff(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}}, (x) => {{> renderEncodeDiffArg items}})
{{~else if (eq type "enum")}}
writeUInt8(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "int")}}
writeInt(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "float")}}
writeFloat(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "string")}}
writeString(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "boolean")}}
writeBoolean(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "plugin")}}
{{> renderEncodeDiffArg item arg=arg}}
{{~else}}
{{typeString}}.encodeDiff({{#if arg}}obj.{{arg}}{{else}}x{{/if}}, buf)
{{~/if}}
{{/inline}}
{{#*inline "renderDecodeArg"}}
{{#if (eq type "optional")}}
parseOptional(sb, () => {{> renderDecodeArg item}})
{{~else if (eq type "array")}}
parseArray(sb, () => {{> renderDecodeArg items}})
{{~else if (eq type "enum")}}
parseUInt8(sb)
{{~else if (eq type "int")}}
parseInt(sb)
{{~else if (eq type "float")}}
parseFloat(sb)
{{~else if (eq type "string")}}
parseString(sb)
{{~else if (eq type "boolean")}}
parseBoolean(sb)
{{~else if (eq type "plugin")}}
{{> renderDecodeArg item}}
{{~else}}
{{typeString}}.decode(sb)
{{~/if}}
{{/inline}}
{{#*inline "renderDecodeDiffArg"}}
{{#if (eq type "optional")}}
parseOptional(sb, () => {{> renderDecodeDiffArg item}})
{{~else if (eq type "array")}}
parseArrayDiff(sb, () => {{> renderDecodeDiffArg items}})
{{~else if (eq type "enum")}}
parseUInt8(sb)
{{~else if (eq type "int")}}
parseInt(sb)
{{~else if (eq type "float")}}
parseFloat(sb)
{{~else if (eq type "string")}}
parseString(sb)
{{~else if (eq type "boolean")}}
parseBoolean(sb)
{{~else if (eq type "plugin")}}
{{> renderDecodeDiffArg item}}
{{~else}}
{{typeString}}.decodeDiff(sb)
{{~/if}}
{{/inline}}

export function encodeStateSnapshot(x: {{userState}}) {
  const buf = new _Writer();
  {{#with (lookup types userState)}}
  {{> renderEncodeArg}};
  {{/with}}
  return buf.toBuffer();
}
export function encodeStateUpdate(
  x: _DeepPartial<{{userState}}> | undefined,
  changedAtDiff: number,
  messages: _Message[]
) {
  const buf = new _Writer();
  buf.writeUVarint(changedAtDiff);
  const responses = messages.flatMap((msg) => (msg.type === "response" ? msg : []));
  buf.writeUVarint(responses.length);
  responses.forEach(({ msgId, response }) => {
    buf.writeUInt32(Number(msgId));
    writeOptional(buf, response.type === "error" ? response.error : undefined, (x) => {{> renderEncodeArg error}});
  });
  const events = messages.flatMap((msg) => (msg.type === "event" ? msg : []));
  buf.writeUVarint(events.length);
  events.forEach(({ event }) => buf.writeString(event));
  if (x !== undefined) {
    {{#with (lookup types userState)}}{{> renderEncodeDiffArg}};{{/with}}
  }
  return buf.toBuffer();
}
export function decodeStateUpdate(buf: ArrayBufferView | _Reader): {
  stateDiff?: _DeepPartial<{{userState}}>;
  changedAtDiff: number;
  responses: _ResponseMessage[];
  events: _EventMessage[];
} {
  const sb = ArrayBuffer.isView(buf) ? new _Reader(buf) : buf;
  const changedAtDiff = sb.readUVarint();
  const responses = [...Array(sb.readUVarint())].map(() => {
    const msgId = sb.readUInt32();
    const maybeError = parseOptional(sb, () => {{> renderDecodeArg error}});
    return _Message.response(msgId, maybeError === undefined ? _Response.ok() : _Response.error(maybeError));
  });
  const events = [...Array(sb.readUVarint())].map(() => _Message.event(sb.readString()));
  const stateDiff = sb.remaining() ? {{#with (lookup types userState)}}{{> renderDecodeDiffArg}}{{/with}} : undefined;
  return { stateDiff, changedAtDiff, responses, events };
}
export function decodeStateSnapshot(buf: ArrayBufferView | _Reader) {
  const sb = ArrayBuffer.isView(buf) ? new _Reader(buf) : buf;
  {{#with (lookup types userState)}}
  return {{> renderDecodeArg}};
  {{/with}}
}

function writeUInt8(buf: _Writer, x: number) {
  buf.writeUInt8(x);
}
function writeBoolean(buf: _Writer, x: boolean) {
  buf.writeUInt8(x ? 1 : 0);
}
function writeInt(buf: _Writer, x: number) {
  buf.writeVarint(x);
}
function writeFloat(buf: _Writer, x: number) {
  buf.writeFloat(x);
}
function writeString(buf: _Writer, x: string) {
  buf.writeString(x);
}
function writeOptional<T>(buf: _Writer, x: T | undefined, innerWrite: (x: T) => void) {
  writeBoolean(buf, x !== undefined);
  if (x !== undefined) {
    innerWrite(x);
  }
}
function writeArray<T>(buf: _Writer, x: T[], innerWrite: (x: T) => void) {
  buf.writeUVarint(x.length);
  for (let i = 0; i < x.length; i++) {
    innerWrite(x[i]);
  }
}
function writeArrayDiff<T>(buf: _Writer, x: (T | typeof _NO_DIFF)[], innerWrite: (x: T) => void) {
  buf.writeUVarint(x.length);
  const tracker: boolean[] = [];
  x.forEach((val) => {
    tracker.push(val !== _NO_DIFF);
  });
  buf.writeBits(tracker);
  x.forEach((val) => {
    if (val !== _NO_DIFF) {
      innerWrite(val);
    }
  });
}

function parseUInt8(buf: _Reader): number {
  return buf.readUInt8();
}
function parseBoolean(buf: _Reader): boolean {
  return buf.readUInt8() > 0;
}
function parseInt(buf: _Reader): number {
  return buf.readVarint();
}
function parseFloat(buf: _Reader): number {
  return buf.readFloat();
}
function parseString(buf: _Reader): string {
  return buf.readString();
}
function parseOptional<T>(buf: _Reader, innerParse: (buf: _Reader) => T): T | undefined {
  return parseBoolean(buf) ? innerParse(buf) : undefined;
}
function parseArray<T>(buf: _Reader, innerParse: () => T): T[] {
  const len = buf.readUVarint();
  const arr = [];
  for (let i = 0; i < len; i++) {
    arr.push(innerParse());
  }
  return arr;
}
function parseArrayDiff<T>(buf: _Reader, innerParse: () => T): (T | typeof _NO_DIFF)[] {
  const len = buf.readUVarint();
  const tracker = buf.readBits(len);
  const arr = [];
  for (let i = 0; i < len; i++) {
    if (tracker.shift()) {
      arr.push(innerParse());
    } else {
      arr.push(_NO_DIFF);
    }
  }
  return arr;
}
