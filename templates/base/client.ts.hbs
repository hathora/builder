import WebSocket from "isomorphic-ws";
import axios from "axios";
import jwtDecode from "jwt-decode";
import { load } from "protobufjs";
import {
  Username,
  UserData,
  {{userState}},
  {{#each methods}}
  {{makeRequestName @key}},
  {{/each}}
} from "./types";

export type StateId = string;

export class RtagClient {
  private callbacks: Record<string, (error?: string) => void> = {};

  private constructor(private socket: WebSocket) {}

  public static getUserFromToken(token: string): UserData {
    return jwtDecode(token);
  }

  {{#each auth}}
  {{#if (eq @key "anonymous")}}
  public static async loginAnonymous(): Promise<string> {
    return (await axios.post("/login/anonymous")).data.token;
  }

  {{else if (eq @key "google")}}
  public static async signupGoogle(username: Username, idToken: string): Promise<string> {
    return (await axios.post("/signup/google", { username, idToken })).data.token;
  }

  public static async loginGoogle(idToken: string): Promise<string> {
    return (await axios.post("/login/google", { idToken })).data.token;
  }

  {{/if}}
  {{/each~}}

  public static async createState(token: string, request: {{makeRequestName initialize}}): Promise<StateId> {
    const res = await axios.post("/new", request, { headers: { Authorization: "Bearer " + token } });
    return res.data.stateId;
  }

  public static connect(
    host: string,
    token: string,
    stateId: StateId,
    onStateChange: (state: {{userState}}) => void
  ): Promise<RtagClient> {
    return new Promise((resolve, reject) => {
      load("/.rtag/types.proto").then((root) => {
        const Response = root.lookupType("Response");
        const socket = new WebSocket(`ws://${host}/${stateId}`);
        socket.binaryType = "arraybuffer";
        const client = new RtagClient(socket);
        socket.onopen = () => {
          socket.send(token);
          resolve(client);
        };
        socket.onerror = () => {
          reject();
        };
        socket.onmessage = ({ data }) => {
          const message: any = Response.decode(new Uint8Array(data as ArrayBuffer));
          if (message.type === "res") {
            client.callbacks[message.res.msgId](message.res.error);
            delete client.callbacks[message.res.msgId];
          } else if (message.type === "state") {
            onStateChange(Response.toObject(message, { arrays: true }).state as PlayerState);
          } else {
            console.error("Unknown message type: " + message.type);
          }
        };
      });
    });
  }

  {{#each methods}}
  {{#if (ne @key ../initialize)}}
  public {{@key}}(request: {{makeRequestName @key}}, cb: (error?: string) => void): void {
    const msgId = Math.random().toString(36).substring(2);
    this.callbacks[msgId] = cb;
    this.socket.send(JSON.stringify({ method: "{{@key}}", msgId, args: request }));
  }

  {{/if}}
  {{/each}}
  public disconnect(): void {
    this.socket.close();
  }
}
