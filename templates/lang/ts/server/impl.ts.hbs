import { Methods, Context, Response } from "./.rtag/methods";
import {
  UserData,
  {{#with (lookup types userState)}}
  {{#each properties}}
  {{#if (eq type "enum")}}
  {{typeString}},
  {{/if}}
  {{/each}}
  {{/with}}
  {{userState}},
  {{#each methods}}
  {{makeRequestName @key}},
  {{/each}}
} from "./.rtag/types";

type InternalState = {};

export class Impl implements Methods<InternalState> {
  {{initialize}}(user: UserData, ctx: Context, request: {{makeRequestName initialize}}): InternalState {
    return {};
  }
  {{#each methods}}
  {{#if (ne @key ../initialize)}}
  {{@key}}(state: InternalState, user: UserData, ctx: Context, request: {{makeRequestName @key}}): Response {
    return Response.error("Not implemented");
  }
  {{/if}}
  {{/each}}
  getUserState(state: InternalState, user: UserData): {{userState}} {
    return {
      {{#with (lookup types userState)}}
      {{#each properties}}
      {{> renderArg}}
      {{/each}}
      {{/with}}
    };
  }
  {{#if tick}}
  onTick(state: InternalState, ctx: Context, timeDelta: number): void {}
  {{/if}}
}
{{#*inline "renderArg"}}
{{#if (eq type "array")}}
{{@key}}: [],
{{else if (eq type "number")}}
{{@key}}: 0,
{{else if (eq type "string")}}
{{@key}}: "",
{{else if (eq type "enum")}}
{{@key}}: {{typeString}}.{{options.[0].label}},
{{else if (eq type "optional")}}
{{@key}}: undefined,
{{else if (eq type "object")}}
{{@key}}: {
{{#each properties}}
  {{> renderArg}}
{{/each}}
},
{{/if}}
{{/inline}}
