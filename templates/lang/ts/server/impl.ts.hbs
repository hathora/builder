import { Methods, Context } from "./.rtag/methods";
import { UserData, Response } from "./.rtag/base";
import {
{{#each types}}
  {{@key}},
{{/each}}
{{#each methods}}
  {{makeRequestName @key}},
{{/each}}
} from "./.rtag/types";

type InternalState = {};

export class Impl implements Methods<InternalState> {
  {{initialize}}(user: UserData, ctx: Context, request: {{makeRequestName initialize}}): InternalState {
    return {};
  }
  {{#each methods}}
  {{#if (ne @key ../initialize)}}
  {{@key}}(state: InternalState, user: UserData, ctx: Context, request: {{makeRequestName @key}}): Response {
    return Response.error("Not implemented");
  }
  {{/if}}
  {{/each}}
  getUserState(state: InternalState, user: UserData): {{userState}} {
    return {
      {{#with (lookup types userState)}}
      {{#each properties}}
      {{@key}}: {{> renderDefault}},
      {{/each}}
      {{/with}}
    };
  }
  {{#if tick}}
  onTick(state: InternalState, ctx: Context, timeDelta: number): void {}
  {{/if}}
}
{{#*inline "renderDefault"}}
{{#if (eq type "array")}}
[]
{{~else if (eq type "number")}}
0
{{~else if (eq type "string")}}
""
{{~else if (eq type "enum")}}
0
{{~else if (eq type "boolean")}}
false
{{~else if (eq type "optional")}}
undefined
{{~else if (eq type "object")}}
{{typeString}}.default()
{{~else if (eq type "plugin")}}
{{> renderDefault item}}
{{/if}}
{{/inline}}
