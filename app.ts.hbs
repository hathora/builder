import { LsotClient } from "./client";
import { LitElement, html, customElement, property } from "lit-element";

function connect(userId: string, stateId: string) {
  return LsotClient.connect(
    userId,
    stateId,
    (state) => (document.getElementById("state")!.innerHTML = JSON.stringify(state, null, 2))
  );
}

function setMetadata(userName: string, stateId: string) {
  const urlParams = new URLSearchParams();
  urlParams.set("stateId", stateId);
  urlParams.set("userName", userName);
  history.pushState({}, "", window.location.pathname + "?" + urlParams.toString());
}

const name = prompt("Enter username")!;
LsotClient.registerUser(name).then((userId) => {
  const urlParams = new URLSearchParams(window.location.search);
  const stateId = urlParams.get("stateId") || prompt("Enter stateId (or enter if creating new)");
  if (stateId != null && stateId.length > 0) {
    setMetadata(name, stateId);
    return connect(userId, stateId);
  } else {
    return LsotClient.createState(userId).then((stateId) => {
      setMetadata(name, stateId);
      return connect(userId, stateId);
    });
  }
});

@customElement("method-form")
class MethodForm extends LitElement {
  @property({ type: String }) method: string | undefined;
  @property({ type: Object }) value: Record<string, any> = {};

  render() {
    return html`<div class="form" id="${this.method}">
      <h1 class="heading">${this.method}</h1>
      <slot></slot>
      <button type="button" class="submit-button" @click=${this.onSubmit}>
        <span class="button-text">Submit</span>
      </button>
    </div>`;
  }

  firstUpdated() {
    this.addEventListener("udpate", (e) => {
      this.value = (e as CustomEvent).detail.value;
    });
  }

  onSubmit() {
    console.log(this.method, this.value);
  }
}

@customElement("object-input")
class ObjectInput extends LitElement {
  @property({ type: String }) key: string | undefined;
  @property({ type: Object }) value: Record<string, any> = {};

  render() {
    return html`<div><slot></slot></div>`;
  }

  firstUpdated() {
    this.addEventListener("udpate", (e) => {
      if (e.target !== this) {
        e.stopPropagation();
        const { key, value }: { key: string; value: any } = (e as CustomEvent).detail;
        this.value[key] = value;
        this.dispatchEvent(
          new CustomEvent("udpate", {
            detail: { key: this.key, value: this.value },
            bubbles: true,
          })
        );
      }
    });
  }
}

@customElement("array-input")
class ArrayInput extends LitElement {
  @property({ type: String }) key: string | undefined;
  @property({ type: Array }) value: any[] = [];

  render() {
    return html`<div><slot></slot></div>`;
  }

  firstUpdated() {
    this.addEventListener("udpate", (e) => {
      if (e.target !== this) {
        e.stopPropagation();
        this.value[0] = (e as CustomEvent).detail.value;
        this.dispatchEvent(
          new CustomEvent("udpate", {
            detail: { key: this.key, value: this.value },
            bubbles: true,
          })
        );
      }
    });
  }
}

@customElement("string-input")
class StringInput extends LitElement {
  @property({ type: String }) key: string | undefined;
  @property({ type: Number }) value: string | undefined;

  render() {
    return html`<div><input type="text" @change=${this.onChange} /></div>`;
  }

  onChange(e: Event) {
    const target: any = e.target;
    this.value = target.value;
    this.dispatchEvent(
      new CustomEvent("udpate", {
        detail: { key: this.key, value: this.value },
        bubbles: true,
      })
    );
  }
}

@customElement("number-input")
class NumberInput extends LitElement {
  @property({ type: String }) key: string | undefined;
  @property({ type: Number }) value: number | undefined;

  render() {
    return html`<div><input type="number" @change=${this.onChange} /></div>`;
  }

  onChange(e: Event) {
    const target: any = e.target;
    this.value = Number(target.value);
    this.dispatchEvent(
      new CustomEvent("udpate", {
        detail: { key: this.key, value: this.value },
        bubbles: true,
      })
    );
  }
}

@customElement("boolean-input")
class BooleanInput extends LitElement {
  @property({ type: String }) key: string | undefined;
  @property({ type: Boolean }) value: boolean | undefined;

  render() {
    return html`<input type="checkbox" @change=${this.onChange} />`;
  }

  onChange(e: Event) {
    const target: any = e.target;
    this.value = target.checked;
    this.dispatchEvent(
      new CustomEvent("udpate", {
        detail: { key: this.key, value: this.value },
        bubbles: true,
      })
    );
  }
}

@customElement("enum-input")
class EnumInput extends LitElement {
  @property({ type: String }) key: string | undefined;
  @property({ type: Array }) options: { value: number; label: string }[] = [];
  @property({ type: Number }) value: number | undefined;

  render() {
    return html`<select @change=${this.onChange}>
      ${this.options.map(({ value, label }) => html`<option value="${value}">${label}</option>`)}
    </select>`;
  }

  onChange(e: Event) {
    const target: any = e.target;
    this.value = Number(target.value);
    this.dispatchEvent(
      new CustomEvent("udpate", {
        detail: { key: this.key, value: this.value },
        bubbles: true,
      })
    );
  }
}
