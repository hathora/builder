import { LsotClient } from "./client";
import Vue from "vue";

function connect(userId: string, stateId: string) {
  return LsotClient.connect(
    userId,
    stateId,
    (state) => (document.getElementById("state")!.innerHTML = JSON.stringify(state, null, 2))
  );
}

function setMetadata(userName: string, stateId: string) {
  const urlParams = new URLSearchParams();
  urlParams.set("stateId", stateId);
  urlParams.set("userName", userName);
  history.pushState({}, "", window.location.pathname + "?" + urlParams.toString());
}

const name = prompt("Enter username")!;
LsotClient.registerUser(name).then((userId) => {
  const urlParams = new URLSearchParams(window.location.search);
  const stateId = urlParams.get("stateId") || prompt("Enter stateId (or enter if creating new)");
  if (stateId != null && stateId.length > 0) {
    setMetadata(name, stateId);
    return connect(userId, stateId);
  } else {
    return LsotClient.createState(userId).then((stateId) => {
      setMetadata(name, stateId);
      return connect(userId, stateId);
    });
  }
});

Vue.component("method-form", {
  props: { method: String },
  data: () => ({ value: {} }),
  template: `<div class="form" :id="method">
      <h1 class="heading">\{{method}}</h1>
      <slot :arg="method" :value="value"></slot>
      <button type="button" class="submit-button" @click="this.console.log(JSON.parse(JSON.stringify(value)))">
        <span class="button-text">Submit</span>
      </button>
    </div>`,
  created: function () {
    this.$on("update", (arg: string, value: any) => {
      this.$set(this.value, arg, value);
    });
  },
});

Vue.component("object-input", {
  props: { arg: String, value: { type: Object, default: () => ({}) } },
  template: `<div><slot :value="value"></slot></div>`,
  created: function () {
    this.$on("update", (arg: number, value: any) => {
      this.$parent.$emit("update", arg, value);
    });
  },
});

Vue.component("array-input", {
  props: { arg: String, value: { type: Array, default: () => [] } },
  template: `<div>
      <slot v-for="(v, i) in value" :arg="i.toString()" :value="v"></slot>
      <button type="button" @click="$parent.$emit('update', arg, value.concat(null))">Add</button>
    </div>`,
  created: function () {
    this.$on("update", (arg: string, value: any) => {
      this.$parent.$emit("update", this.arg, Object.assign([], this.value, { [Number(arg)]: value }));
    });
  },
});

Vue.component("enum-input", {
  props: { arg: String, value: { type: Number, default: 0 }, options: Array },
  template: `<div>
      <select @change="$parent.$emit('update', arg, Number($event.target.value))">
        <option v-for="option in options" :value="option.value" :selected="option.value === value">
          \{{option.label}}
        </option>
      </select>
    </div>`,
});

Vue.component("string-input", {
  props: { arg: String, value: { type: String, default: "" } },
  template: `<div><input type="text" :value="value" @input="$parent.$emit('update', arg, $event.target.value)" /></div>`,
});

new Vue({ el: "#app" });
