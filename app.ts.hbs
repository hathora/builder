import { LsotClient } from "./client";
import Vue from "vue";

function connect(userId: string, stateId: string) {
  return LsotClient.connect(
    userId,
    stateId,
    (state) => (document.getElementById("state")!.innerHTML = JSON.stringify(state, null, 2))
  );
}

function setMetadata(userName: string, stateId: string) {
  const urlParams = new URLSearchParams();
  urlParams.set("stateId", stateId);
  urlParams.set("userName", userName);
  history.pushState({}, "", window.location.pathname + "?" + urlParams.toString());
}

const name = prompt("Enter username")!;
LsotClient.registerUser(name).then((userId) => {
  const urlParams = new URLSearchParams(window.location.search);
  const stateId = urlParams.get("stateId") || prompt("Enter stateId (or enter if creating new)");
  if (stateId != null && stateId.length > 0) {
    setMetadata(name, stateId);
    return connect(userId, stateId);
  } else {
    return LsotClient.createState(userId).then((stateId) => {
      setMetadata(name, stateId);
      return connect(userId, stateId);
    });
  }
});

Vue.component("method-form", {
  props: { method: String },
  template: `<div class="form" :id="method">
        <h1 class="heading">\{{method}}</h1>
        <slot></slot>
        <button type="button" class="submit-button" @click="submit">
          <span class="button-text">Submit</span>
        </button>
      </div>`,
  methods: {
    submit: function () {
      const child: any = this.$children[0];
      console.log(child.value());
    },
  },
});

Vue.component("object-input", {
  props: { arg: String },
  template: `<div><slot></slot></div>`,
  methods: {
    value: function () {
      return Object.fromEntries(
        this.$children.map((child: any) => [child.arg, typeof child.value === "function" ? child.value() : child.value])
      );
    },
  },
});

Vue.component("array-input", {
  props: { arg: String },
  data: () => ({ numItems: 0 }),
  template: `<div>
      <slot v-for="n in numItems"></slot>
      <button type="button" @click="numItems += 1">Add</button>
    </div>`,
  methods: {
    value: function () {
      return this.$children.map((child: any) => (typeof child.value === "function" ? child.value() : child.value));
    },
  },
});

Vue.component("enum-input", {
  props: { arg: String, options: Array },
  data: () => ({ value: 0 }),
  template: `<div>
      <select v-model="value">
        <option v-for="option in options" :value="option.value">
          \{{option.label}}
        </option>
      </select>
    </div>`,
});

Vue.component("string-input", {
  props: { arg: String },
  data: () => ({ value: "" }),
  template: `<div><input type="text" v-model="value" /></div>`,
});

new Vue({ el: "#app" });
