/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   paper-icon-button-light.html
 */

/// <reference path="../polymer/types/polymer.d.ts" />
/// <reference path="../paper-behaviors/paper-ripple-behavior.d.ts" />

/**
 * This is a lighter version of `paper-icon-button`. Its goal is performance, not
 * developer ergonomics, so as a result it has fewer features than `paper-icon-button`
 * itself. To use it, you must distribute a `button` containing the `iron-icon` you
 * want to use:
 *
 * <link rel="import" href="../iron-icon/iron-icon.html">
 * <link rel="import" href="../paper-icon-button/paper-icon-button-light.html">
 * <link rel="import" href="../iron-icons/iron-icons.html">
 *
 * <paper-icon-button-light>
 *   <button title="heart">
 *     <iron-icon icon="favorite"></iron-icon>
 *   </button>
 * </paper-icon-button-light>
 *
 * Note that this button is assumed to be distributed at the startup of
 * `paper-icon-button-light`. Dynamically adding a `button` to this element is
 * not supported.
 *
 * The `title`/`disabled` etc. attributes go on the distributed button, not on the wrapper.
 *
 * The following custom properties and mixins are also available for styling:
 * Custom property | Description | Default
 * ----------------|-------------|----------
 * `--paper-icon-button-light-ripple` | Mixin applied to the paper ripple | `{}`
 */
interface PaperIconButtonLightElement extends Polymer.Element, Polymer.PaperRippleBehavior {
  ensureRipple(...var_args: any[]): void;
  ready(): void;
  _rippleDown(): void;
  _rippleUp(): void;
}

interface HTMLElementTagNameMap {
  "paper-icon-button-light": PaperIconButtonLightElement;
}
